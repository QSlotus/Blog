<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>致我的十五岁</title>
    <url>/posts/7224.html</url>
    <content><![CDATA[<blockquote>
<p>致我的十五岁。</p>
</blockquote>
<!-- more -->


<p>第十五年。<br>与这个世界交手的第十五年。<br>感受世界万物美好的第十五年；<br>品尝生活酸甜苦辣的第十五年；<br>体验过喜怒哀乐惧的第十五年。<br>第十五年，我曾奔波与医院与家中；<br>第十五年，我曾枯坐于书桌前胡思乱想。<br>第十五年，我有过惊慌失措，也有过无所畏惧；<br>第十五年，我有过斗志昂扬，也有过划水躺平。<br>我会因为在网上交到一个朋友而感到兴奋与激动，也会因许久没有联系的朋友的拉黑屏蔽而感到茫然与失落。<br>我似乎与现实的隔阂越来越大。<br>我仿佛对现实世界的一切都漠不关心。以前感到兴奋是常有的事，现在却是淡然，甚至对一切不理睬的冷漠。<br>今日，除夕，大年三十。<br>今日便会在我人生中第十五年画上一个句号，将过去整整一年的苦难与悲哀埋葬在记忆里面。<br>第十五年。<br>祝我自己生日快乐！<br>希望新的一年越来越好！</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>十五岁</tag>
      </tags>
  </entry>
  <entry>
    <title>拾柒.</title>
    <url>/posts/29787.html</url>
    <content><![CDATA[<p><meting-js server="netease" type="song" id="2668317465"></meting-js></p>
<p>17岁。<br>很巧，我的生日和除夕是一天。</p>
<p>突然觉得时间过的好快啊。<br>三年前这段时间，我还在老家疯狂赶寒假作业，做所有初三学生都会做的事；我还能肆无忌惮与昕嘻嘻哈哈，或是讨要红包，或是互怼表情包…<br>当时的我在想些什么呢？或许是想着要赶快完成作业，好去放炮，享受短暂的寒假时光；或许是想着要多看看学习资料，想着中考会发挥什么样的水平、想着是否能和喜欢的人考上同一所高中…<br>可是，这一切都破灭了。<br>三年前的那一张检查报告单打破了我对未来所有美好的幻想，一场重病让我躺在病榻不得动弹。被送入口中的更多的是数不尽的药片而非糖果、小吃，待的最多的地方更多的是死气沉沉的病房而非学校。那一年，我刚满14岁。</p>
<p>于是，我治了三年病，也在家里度过了这三年。可402的他们已经在学校度过了三年。高一、高二、高三，他们即将高考，即将奔赴更光明的未来。而我，依旧在此处徘徊。<br>我真的…真的…好想和他们一起上学啊…</p>
<p>今年9月，若一切顺利，我就能复学上高一。<br>终于啊。<br>苦尽甘来。</p>
<p>新的一年，新的一岁。希望自己能够变得更好，身体能够彻底恢复健康，学业能够顺利，在新环境里面能够很快适应。<br>干杯。<br>敬不完美的明天。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>十七岁</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云FC + Alist Web 实现无服务器部署开源神器 Alist</title>
    <url>/posts/12964.html</url>
    <content><![CDATA[<p><meting-js server="netease" type="song" id="1926144232"></meting-js></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个思路是我在Alist的Discussion里面看到的 <a class="link"   href="https://github.com/AlistGo/alist/discussions/6680#discussioncomment-10116100" >传送门<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>于是花时间研究了下，感觉还行，所以就写一篇文记录一下。</p>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>小心吞金兽！</p>

    </div>
    <div class="notel-content">
      <p><strong>此文仅用于记录一个搭建思路，不建议实际实施（因为费用太贵了）</strong><br><strong>我之前随便测试了一下就扣我 ￥0.04，不敢想用多了会扣多少钱</strong><br><strong>还不如去买一个便宜的服务器整，用FC太不划算了</strong></p>

    </div>
  </div>


<h3 id="关于Alist"><a href="#关于Alist" class="headerlink" title="关于Alist"></a>关于Alist</h3><blockquote>
<p>Alist是一个开源的文件索引和分享服务项目，它允许用户在互联网上建立自己的文件库，方便地进行文件的上传、下载和分享。以下是Alist的一些主要特性和功能：</p>
<ol>
<li><strong>简单易用</strong>：Alist的用户界面简洁直观，无论是上传文件、创建文件夹还是设置文件权限，都能快速完成。</li>
<li><strong>轻量级</strong>：Alist的代码量非常小，且运行效率高，能在各种硬件设备上流畅运行。</li>
<li><strong>文件预览</strong>：Alist支持多种常用文件格式的预览，如文本、图片、音频和视频等，用户无需下载文件即可查看内容。</li>
<li><strong>多种存储后端支持</strong>：Alist支持多种云存储服务，如阿里云OSS、腾讯云COS等，用户可以选择最适合自己的存储服务。</li>
<li><strong>自定义主题</strong>：Alist支持主题自定义，用户可以根据自己的喜好调整网站的外观。</li>
<li><strong>完全开源</strong>：Alist的源代码完全开源，用户可以自由查看、修改，甚至参与到项目的开发中来。</li>
<li><strong>支持WebDAV</strong>：Alist支持所有WebDAV存储，WebDAV是一种用于访问文件的标准协议，用户可以使用WebDAV客户端来管理文件。</li>
<li><strong>黑暗模式</strong>：用户可以根据自己的喜好在明暗模式之间自由切换。</li>
<li><strong>受保护的路由</strong>：可以为特定的路径添加密码保护和身份验证，增强安全性。</li>
<li><strong>文件预览</strong>：Alist支持多种文件格式的预览，包括视频、音频、文档、PDF、图片等，甚至支持ipa文件的安装预览。</li>
<li><strong>打包下载&#x2F;批量下载</strong>：利用浏览器的stream API支持打包下载，无需使用服务器，同时支持使用Aria2进行批量下载。</li>
<li><strong>单点登录</strong>：用户可以使用单点登录快速登录AList。</li>
<li><strong>自动注册AList账号</strong>：通过单点登录，用户可以自动注册成为AList账号。</li>
<li><strong>离线下载</strong>：AList支持将种子内容离线下载到指定目录，但需要良好的网络环境。</li>
<li><strong>保险箱加密&#x2F;解密文件</strong>：用户可以安全地将加密数据存储在远程存储提供商上，数据存储在保险箱中，提供商只能看到保险箱而无法查看数据内容。</li>
<li><strong>更多新功能</strong>：AList还包括文本编辑器、README&#x2F;HTML渲染、文件永久链接、Cloudflare Workers代理等功能。</li>
</ol>
<p>Alist通过其强大的功能和灵活性，为用户提供了一个高效、便捷的文件管理和分享解决方案。用户可以根据自己的需求，将Alist部署在本地或云服务器上，实现个性化的文件服务。</p>
</blockquote>
<blockquote>
<p>以上内容来自 Kimi</p>
</blockquote>
<p>Alist 开源地址：<a class="link"   href="https://github.com/AlistGo/alist" >AlistGo&#x2F;alist<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>官方文档：<a class="link"   href="https://alist.nn.ci/zh/" >Alist文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>官方演示站点：<a class="link"   href="https://al.nn.ci/" >Alist<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="需要的东西"><a href="#需要的东西" class="headerlink" title="需要的东西"></a>需要的东西</h3><ul>
<li>一个已实名的阿里云账号（需要有可用的OSS资源包）（用于持久化存储alist配置文件）</li>
<li>一个 Github 账号</li>
<li>一个 Vercel &#x2F; Netlify &#x2F; Cloudflare 账号 （看你希望部署在那个平台）</li>
</ul>
<p>确保你有这些东西之后，然后就可以开始啦。</p>
<h3 id="部署阿里云云函数"><a href="#部署阿里云云函数" class="headerlink" title="部署阿里云云函数"></a>部署阿里云云函数</h3><p>首先来部署云函数也就是 Alist 后端。</p>
<p>打开 <a class="link"   href="https://oss.console.aliyun.com/bucket" >阿里云OSS控制台<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，<strong>新建一个 Bucket</strong> 用于存储 Alist 本体</p>
<blockquote>
<p>当然如果你想在已有的 Bucket 中放入 Alist 本体文件也行，但是要记得单开一个目录给 Alist 不然文件会很乱</p>
</blockquote>
<blockquote>
<p>下载最新版 Alist <a class="link"   href="https://github.com/AlistGo/alist/releases/latest/download/alist-linux-amd64.tar.gz" >alist-linux-amd64.tar.gz<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>下载完后解压，将其中的 <code>alist</code> 二进制文件上传至你新建的 Bucket 中即可。<br>这样文件存储部分就完成了。</p>
<p>然后打开 <a class="link"   href="https://fcnext.console.aliyun.com/overview" >函数计算控制台<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，点击左侧的 <strong>函数 – 创建函数</strong> 后，选择 <strong>Web函数</strong></p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/alifc-1.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/alifc-2.png"
                     
                ></p>
</blockquote>
<p>配置项填写如下：</p>
<ol>
<li>函数名称：随意</li>
<li>地域：建议选择香港（如果你要部署到CF Pages&#x2F;Vercel&#x2F;Netlify的话</li>
<li>运行环境：选择 <strong>Debian 10</strong></li>
<li>代码上传方式：使用示例代码</li>
<li>启动命令：更改为 <code>sh start.sh</code></li>
<li>监听端口：更改为 <code>5244</code></li>
</ol>
<p>随后点击创建。</p>
<p>创建后，点击配置，进入函数配置界面。然后进入 <strong>配置 – 权限</strong> 板块，给函数添加一个角色 <code>AliyunFcDefaultRole</code></p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/alifc-3.png"
                     
                ></p>
</blockquote>

  <div class="note p-4 mb-4 rounded-small red">
    <p>记得要给这个角色添加OSS的相关权限 <a class="link"   href="https://ram.console.aliyun.com/roles/AliyunFcDefaultRole" >策略编辑<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>

  </div>

<p>然后往下滑，切换到 <strong>存储</strong> 选项，启用挂载OSS存储。</p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/alifc-4.png"
                     
                ></p>
</blockquote>
<p>配置项填写如下：</p>
<ol>
<li>Bucket：选择你为 Alist 准备的 Bucket</li>
<li>Bucket 子目录：如果你把Alist上传到了根目录就填 <code>/</code>，上传到其他目录就填对应目录</li>
<li>OSS 访问地址：默认</li>
<li>函数本地目录：填写 <code>/data</code></li>
<li>函数本地目录权限：读写<br>点击 <strong>部署</strong> 即可。</li>
</ol>
<blockquote>
<p>这是我的<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/alifc-5.png"
                     
                ></p>
</blockquote>
<p>OSS挂载完毕之后，回到 <strong>代码</strong> 栏，进入 <strong>WebIDE</strong>，新建一个名为 <code>start.sh</code> 的文件，内容为</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">./alist server</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/alifc-6.png"
                     
                ></p>
</blockquote>

  <div class="note p-4 mb-4 rounded-small danger icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p><strong>填写完毕之后一定要记得点那个部署代码</strong></p>

  </div>

<p>部署代码之后，去 <strong>配置 – 触发器</strong> 找到你的函数公网访问地址，这在后面会用到<br>到浏览器访问这个地址，当有一个 <code>.htm</code> 文件被浏览器下载到本地时说明你的 Alist 后端服务已经搭建成功了。</p>
<h3 id="部署-Alist-Web"><a href="#部署-Alist-Web" class="headerlink" title="部署 Alist Web"></a>部署 Alist Web</h3><p>接下来就是部署前端了。<br>到Github下载构建好的前端文件后，解压并修改 <code>index.html</code></p>
<blockquote>
<p>前端文件：<a class="link"   href="https://github.com/AlistGo/alist-web/releases/latest/download/dist.zip" >dist.zip<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>找到这一段：</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">ALIST</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">cdn</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">monaco_cdn</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">base_path</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">api</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">main_color</span>: <span class="literal">undefined</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">__dynamic_base__</span> = <span class="variable language_">window</span>.<span class="property">ALIST</span>.<span class="property">cdn</span> || <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>将 <code>api</code> 后的 <code>undefined</code> 更改为你之前在云函数找到的公网访问地址，填入即可。<br>示例：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">api: &quot;https://xxxxxxxxxxxxxxxxxx.fcapp.run&quot;</span><br></pre></td></tr></table></figure></div>

<p>保存后，选择一个你喜欢的平台将其部署即可，在此就不赘述</p>
<p><span class="heimu" title="阿巴阿巴"><del class="mask">好累，不想写了</del></span></p>
<h3 id="Some-Tips"><a href="#Some-Tips" class="headerlink" title="Some Tips"></a>Some Tips</h3><ol>
<li>建议把 index.html 混淆一下以免泄露 api 地址，毕竟阿里云函数是按量计费</li>
<li>可以试试在Alist中添加路径为 <code>/data/xxxxx</code> 的本地存储来实现Alist预览&#x2F;修改OSS存储文件的效果（？</li>
<li>不建议启用日志服务，因为日志也是计费的</li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Alist</tag>
        <tag>阿里云FC</tag>
        <tag>无服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习笔记</title>
    <url>/posts/2620.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small success">
    <p>一些在学习C语言过程中做的笔记</p>

  </div>


  <div class="note p-4 mb-4 rounded-small info">
    <p>课程链接：<a class="link"   href="https://www.icourse163.org/learn/ZJU-199001" >程序设计入门——C语言<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>

  </div>

<p><meting-js server="netease" type="song" id="2013579959"></meting-js></p>
<hr>
<ol>
<li><p>出现在 <code>scanf()</code> 中的东西是<strong>程序希望你输入的东西</strong> 而不是程序将要输出的东西</p>
</li>
<li><p><code>const</code> 是一个修饰符，加在 <code>int</code> 的前面，用来给这个变量增加一个 <strong>不变</strong> ( const )的属性。</p>
<p>这个 const 的属性一旦被初始化就不能再修改了。示例：</p>
 <div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> AMOUNT = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> change = AMOUNT - price;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>任意一个整数做加减乘除，结果依然是整数。这是一段示例代码：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">10</span>/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段代码的输出将是 <code>3</code> 而不是 <code>3.333333....</code></p>
<p>如果想要得到 <code>3.33333333...</code> 的输出，那么代码应该修改为：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>,<span class="number">10.0</span>/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>在C中，<code>10</code> 与 <code>10.0</code> 是完全不同的两个数</p>
<p><code>10</code> 是<strong>整数</strong> ，<code>10.0</code> 是<strong>浮点数</strong>。</p>
<blockquote>
<p>浮点数就是<strong>带小数点的数值</strong>。浮点这个词的本意就是指小数点是浮动的，是计算机内部表达非整数（包含分数和无理数）的一种方式。另一种方式叫做定点数，不过在C语言中你不会遇到定点数。人们借用浮点数这个词来表达所有的带小数点的数。</p>
</blockquote>
</li>
<li><p>当浮点数和整数放到一起运算时，C会<strong>将整数转换成浮点数</strong>，然后进行浮点数的运算。</p>
</li>
<li><p>整数</p>
<ul>
<li><p>int</p>
</li>
<li><p><code>printf(&quot;%d&quot;,...);</code></p>
</li>
<li><p><code>scanf(&quot;%d&quot;,...);</code></p>
</li>
</ul>
<p>浮点数</p>
<ul>
<li><p>double</p>
</li>
<li><p><code>printf(&quot;&amp;f&quot;,...);</code></p>
</li>
<li><p><code>scanf(&quot;&amp;lf&quot;,...);</code></p>
</li>
</ul>
</li>
<li><p><strong>表达式</strong> 是一系列运算符和算子的组合，用来计算一个值。</p>
<ul>
<li><p>运算符（operator）是指<strong>进行运算的动作</strong>，比如加法运算符“＋”，减法运算符“-”。</p>
</li>
<li><p>算子（operand）是指<strong>参与运算的值</strong>，这个值可能是常数，也可能是变量，还可能是一个方法的返回值</p>
</li>
<li><p>例如一个表达式：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = b + 5</span><br></pre></td></tr></table></figure></div>

<p>在这个式子中，“ <strong>&#x3D;</strong> ” 和 “ <strong>+</strong> ” 是运算符，<strong>a、b、5</strong> 是算子</p>
</li>
</ul>
</li>
<li><table>
<thead>
<tr>
<th align="center">四则运算</th>
<th align="center">C符号</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">+</td>
<td align="center">加</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">减</td>
</tr>
<tr>
<td align="center">×</td>
<td align="center">*</td>
<td align="center">乘</td>
</tr>
<tr>
<td align="center">÷</td>
<td align="center">&#x2F;</td>
<td align="center">除</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">%</td>
<td align="center">取余</td>
</tr>
<tr>
<td align="center">()</td>
<td align="center">()</td>
<td align="center">括号</td>
</tr>
</tbody></table>
</li>
<li><p>如下是一段计算时间差的代码，用到了第8点的四则运算。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> hour1,minute1;</span><br><span class="line">    <span class="type">int</span> hour2,minute2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入较早的时间（小时 分钟）：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;hour1,&amp;minute1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入较晚的时间（小时 分钟）：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;hour2,&amp;minute2);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t1 = hour1 * <span class="number">60</span> + minute1; <span class="comment">// 转换为分钟单位</span></span><br><span class="line">    <span class="type">int</span> t2 = hour2 * <span class="number">60</span> + minute2; <span class="comment">//如上</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t = t2 - t1;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;时间差是%d小时%d分钟。&quot;</span>,t/<span class="number">60</span>,t%<span class="number">60</span>); <span class="comment">// t/60是小时部分，t%60是分钟部分</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>运算符优先级</p>
<table>
<thead>
<tr>
<th align="center">优先级</th>
<th align="center">运算符</th>
<th align="center">运算</th>
<th align="center">结合关系</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">+</td>
<td align="center">单目<strong>不变</strong></td>
<td align="center">自右向左</td>
<td align="center">a*(+b)</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">-</td>
<td align="center">单目<strong>取负</strong></td>
<td align="center">自右向左</td>
<td align="center">a*(-b)</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">*</td>
<td align="center">乘</td>
<td align="center">自左向右</td>
<td align="center">a*b</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">&#x2F;</td>
<td align="center">除</td>
<td align="center">自左向右</td>
<td align="center">a&#x2F;b</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">%</td>
<td align="center">取余</td>
<td align="center">自左向右</td>
<td align="center">a%b</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">+</td>
<td align="center">加</td>
<td align="center">自左向右</td>
<td align="center">a+b</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">-</td>
<td align="center">减</td>
<td align="center">自左向右</td>
<td align="center">a-b</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">&#x3D;</td>
<td align="center">赋值</td>
<td align="center">自右向左</td>
<td align="center">a&#x3D;b</td>
</tr>
</tbody></table>
<blockquote>
<p>在 <code>a+b</code> 中，运算符 <strong>&#x3D;</strong> 的两边有两个算子，说明这是双目运算</p>
<p>像 <code>-a</code> 这样运算符两边只有一个算子的叫做单目运算</p>
</blockquote>
</li>
<li><p>对于C语言来说，<strong>赋值（&#x3D;）</strong>也是一个运算符</p>
<ul>
<li>赋值也是运算，也有结果</li>
<li><code>a=6</code> 的结果是a被赋予的值，也就是6</li>
<li><code>a=b=6</code> –&gt; <code>a=(b=6)</code></li>
</ul>
</li>
<li><p>不推荐使用 <strong>嵌套式赋值</strong>。示例：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a =<span class="number">6</span>;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line"><span class="type">int</span> c = <span class="number">1</span>+(b=a);</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">result = (result = result * <span class="number">2</span>) * <span class="number">6</span> * (result = <span class="number">3</span> + result);</span><br></pre></td></tr></table></figure></div>
<ul>
<li>不利于阅读</li>
<li>容易出错</li>
</ul>
<p>这种表达式太复杂，不利于阅读和理解，容易造成读程序时的误解。所以要避免写出这样的复杂表达式。这个表达式应该被拆成若干个表达式，然后以明显的正确的顺序来进行计算。</p>
</li>
<li><p>程序表达的是<strong>顺序执行的动作</strong>，而不是关系。</p>
</li>
<li><p><strong>复合赋值</strong></p>
<ul>
<li>5个算数运算符（+ - * &#x2F; %）可以和赋值运算符（&#x3D;）结合起来，形成复合赋值运算符。</li>
<li><code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code></li>
<li><code>total += 5</code> 等价于 <code>total = total + 5</code></li>
<li>两个运算符中间不要有空格</li>
</ul>
</li>
<li><p><strong>递增&#x2F;递减运算符</strong></p>
<ul>
<li>“＋＋”和“–”是两个很特殊的运算符，它们是单目运算符。这个算子必须是变量。</li>
<li>这两个运算符分别叫做<strong>递增</strong>和<strong>递减</strong>运算符，他们的作用就是给这个变量<strong>＋1</strong>或者 <strong>-1</strong>。</li>
<li>下面三个表达式都是等价的：<ul>
<li><code>count++</code>;</li>
<li><code>count += 1;</code></li>
<li><code>count = count + 1;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>++和–可以放在变量的前面，叫做前缀形式；也可以放在变量的后面，叫做后缀形式。</p>
</li>
<li><p><code>++i</code>，<code>--i</code>（在使用 i 之前，先使 i 加（减）1）；<code>i++</code>，<code>i--</code>（在使用 i 之后，使 i 的值加（减）1）。</p>
<p>乍一看，<code>++i</code> 和 <code>i++</code> 的作用相当于 <code>i=i+1</code>。但是 <code>++i</code> 和 <code>i++</code> 的不同之处在于 <code>++i</code> 是先执行 <code>i=i+1</code> 后，再使用 i 的值；而 <code>i++</code> 是先使用 i 的值之后，再执行 <code>i=i+1</code>。</p>
<p>可以这么理解记忆：自增自减都是从左往右运算的，那么<code>i++</code> 就应该是先用 <code>i</code> 的值，再去给它自身+1；以此类推，<code>++i</code> 就应该是先给它自身+1，再去使用 <code>i</code> 的值。</p>
</li>
<li><table>
<thead>
<tr>
<th>表达式</th>
<th>运算</th>
<th>表达式的值</th>
</tr>
</thead>
<tbody><tr>
<td>count++</td>
<td>给count加1</td>
<td>count原来的值</td>
</tr>
<tr>
<td>++count</td>
<td>给count加1</td>
<td>count加1后的值</td>
</tr>
<tr>
<td>count–</td>
<td>给count减1</td>
<td>count原来的值</td>
</tr>
<tr>
<td>–count</td>
<td>给count减1</td>
<td>count减1后的值</td>
</tr>
</tbody></table>
</li>
<li><blockquote>
<p> 根据比较的结果，决定做、还是不做某些动作，就要用到if语句。</p>
<p> 一个基本的if语句由一个关键字if开头，跟上在括号里的一个表示条件的逻辑表达式，然后是一对大括号“{}”之间的若干条语句。如果表示条件的逻辑表达式的结果为true，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而继续下面的其他语句。</p>
</blockquote>
</li>
<li><p><strong>关系运算符</strong></p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x3D;&#x3D;</td>
<td align="center">相等</td>
</tr>
<tr>
<td align="center">!&#x3D;</td>
<td align="center">不相等</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&gt;&#x3D;</td>
<td align="center">大于等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&lt;&#x3D;</td>
<td align="center">小于等于</td>
</tr>
</tbody></table>
</li>
<li><p><strong>关系运算的结果</strong></p>
<ul>
<li>当两个值的关系复合关系运算符的预期时，关系运算的结果为整数<strong>1</strong>，否则为整数<strong>0</strong>。</li>
<li><code>printf(&quot;%d\n&quot;,5==3);</code> 会打印 <code>0</code></li>
<li><code>printf(&quot;%d\n&quot;,5&gt;3);</code> 会打印 <code>1</code></li>
<li><code>printf(&quot;%d\n&quot;,5&lt;=3);</code> 会打印 <code>0</code></li>
</ul>
</li>
<li><p>关系运算符的优先级：</p>
<p><strong>所有的关系运算符的优先级比算术运算符的低，但是比赋值运算的高</strong>。</p>
<ul>
<li><p>例如 <code>7 &gt;= 3 + 4</code> ，<code>+</code> 比 <code>&gt;=</code> 的优先级高，所以在这个表达式中先计算 <code>3+4</code> 再比较 <code>7 &gt;= 3 + 4</code></p>
</li>
<li><p>通过这段代码可以验证是否<strong>先算 算数运算符，后算 关系运算符</strong>。</p>
</li>
<li><pre><code class="c">#include&lt;stdio.h&gt;
int main()&#123;
    printf(&quot;%d&quot;,7&gt;=3+4);
    return 0;
&#125;
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - 编译运行后，结果为 `1`。说明 **关系运算符的优先级比算术运算符的低**。</span><br><span class="line"></span><br><span class="line">    判断是否相等的 **==** 和 **!=** 的优先级比其他的关系运算符的低，而连续的关系运算是从左到右进行的。</span><br><span class="line"></span><br><span class="line">    - `5 &gt; 3 == 6 &gt; 4` 输出为 `1`</span><br><span class="line">    - `6 &gt; 5 &gt; 4 ` 输出为 `0` 因为是先算`6 &gt; 5` ，结果是 `1`，然后算 `1 &gt; 4` 结果为 `0`</span><br><span class="line">    - （两条示例分别印证了上面 &lt;span class=&quot;heimu&quot; title=&quot;悲&quot;&gt;上面。。上面的什么呢 想不出来（悲&lt;/span&gt;</span><br><span class="line">    </span><br><span class="line">23. **注释**</span><br><span class="line"></span><br><span class="line">    注释（comment）插入在程序代码中，用来向读者提供解释信息。它们对于程序的功能没有任何影响，但是往往能使得程序更容易被人类读者理解。</span><br><span class="line"></span><br><span class="line">    可用：</span><br><span class="line"></span><br><span class="line">    - `//`  \***C99独有**</span><br><span class="line">    - `/* */`</span><br><span class="line">      -  延续数行的注释，要用多行注释的格式来写。</span><br><span class="line">      - 多行注释由一对字符序列 `/*` 开始，而以 `*/` 结束。也可以用于一行内的注释。</span><br><span class="line">      - `int ak=47 /*36*/ ,y=9;` </span><br><span class="line">      - 单行注释 **C99独有**</span><br><span class="line"></span><br><span class="line">24. 在C语言中，每个语句通常以分号（;）结束。但是，如果你使用了**大括号** `&#123;&#125;` 来创建一个代码块，那么块内的最后一个语句后面的分号**是可选的**。这是因为大括号**定义了一个语句块，它本身就是一条语句**，所以不需要在块的末尾加分号。</span><br><span class="line"></span><br><span class="line">25. 一个基本的if语句由一个关键字 `if` 开头，跟上在括号里的一个表示条件的逻辑表达式，然后是一对大括号“｛｝”之间的若干条语句。</span><br><span class="line"></span><br><span class="line">    如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而继续下面的其他语句。</span><br><span class="line"></span><br><span class="line">    示例：</span><br><span class="line"></span><br><span class="line">    ```c</span><br><span class="line">    #include&lt;stdio.h&gt;</span><br><span class="line">    int main()&#123;</span><br><span class="line">        if (xxxx)&#123;</span><br><span class="line">            xxxxxxx; // 这一句是if语句的一部分</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            xxxxxxx; // 这一句是else语句的一部分</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
</code></pre>
</li>
</ul>
</li>
<li><p>if语句这一行结束的时候并没有表示语句结束的 <code>;</code> ，而后面的赋值语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示语句结束的 <code>;</code>。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这条赋值语句，决定它是否要被执行。</p>
<p>示例：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xxxx)</span><br><span class="line">        xxxxxxxx; <span class="comment">// 这一句是if语句的一部分</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        xxxxxxx; <span class="comment">// 这一句是else语句的一部分</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><code>while</code> 循环就和 <code>if</code> 一样，条件满足就不断做后面的句子。</p>
</li>
<li><p><code>while</code> 循环的流程图：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/note-1.png"
                      alt="while循环"
                ></p>
<p><strong>循环体内要有改变条件的机会，否则就会一直进行循环。</strong></p>
</li>
<li><p>如果我们把while翻译作“当”，那么一个while循环的意思就是：<strong>当条件满足时，不断地重复循环体内的语句</strong>。</p>
<p>循环执行之前判断是否继续循环，所以<strong>有可能循环一次也没有被执行</strong></p>
<p><strong>条件成立</strong> 是循环继续的条件。</p>
</li>
<li><p>我们可以通过在程序的适当位置插入 <code>printf()</code> 来查看各个变量的值而不使用调试。例如下面的代码：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> x ;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	x = <span class="number">3000</span>;</span><br><span class="line">	<span class="keyword">while</span> ( x &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">		n++;</span><br><span class="line">		x /= <span class="number">10</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;x=%d,n=%d\n&quot;</span>, x, n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;位数为%d位。\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>do-while循环</strong> ： 在进入循环的时候不做检查，而是在执行完一轮循环体的代码之后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环。</p>
<p>流程图如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/note-2.png"
                      alt="do-while循环"
                ></p>
<p>do-while其实就是，<strong>不管你条件成不成立，先做循环内的句子，再去判断条件是否成立</strong></p>
<p>do-while循环和while循环很像，区别是在 <strong>循环体执行结束的时候才来判断条件</strong>。也就是说，无论如何，循环 <strong>都会执行至少一遍</strong>，然后再来判断条件。与while循环相同的是，条件满足时执行循环，条件不满足时结束循环。</p>
<p>格式：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    xxxxxxx;</span><br><span class="line">&#125; <span class="keyword">while</span> ( 条件 ); <span class="comment">// 注意要加分号</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>for 循环</strong> ：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( 初始动作 ; 循环条件 ; 每轮循环要做的动作 )&#123;</span><br><span class="line">    xxxxxxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>for循环像一个<strong>计数循环</strong>：设定一个计数器，<strong>初始化</strong>它，然后在计数器<strong>到达某值之前</strong>，<strong>重复执行循环体</strong>，而每执行一轮循环，计数器值以一定步进进行调整，比如加1或者减1</p>
<p>例如</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>;    i&lt;= <span class="number">10</span>;   i++ )&#123;</span><br><span class="line"><span class="comment">//     ^初始化   ^循环条件  ^ 每轮循环要做的动作</span></span><br><span class="line">   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>for可以理解为 <strong>对于</strong>。比如说，对于以下代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( count=<span class="number">10</span>; count&gt;<span class="number">0</span>; count-- )</span><br></pre></td></tr></table></figure></div>

<p>可以理解为</p>
<blockquote>
<p>对于一开始的 <strong>count＝10</strong>，<strong>当 count＞0 时</strong>，重复做循环体，每一轮循环<strong>在做完循环体内语句后</strong>，使得 <strong>count–</strong> 。”</p>
</blockquote>
</li>
<li><p><strong>判断或循环</strong>后面都必须跟一个循环体。</p>
</li>
<li><p>做 <strong>求和</strong> 的程序时，记录结果的变量应该初始化为 <strong>0</strong>，而做 <strong>求积</strong> 的变量时，记录结果的变量应该初始化为 <strong>1</strong></p>
</li>
<li><p>for循环其实是等价于while循环的。例如：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">    fact *= i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>等价于</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++)&#123; <span class="comment">// [int i=1] 这一段仅适用于C99</span></span><br><span class="line">    fact *= i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>任何一个for循环都可以改写为一个while循环。</p>
</li>
<li><p>以C语言为例，标准的 <code>for</code> 循环是这样的：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 循环条件表达式; 迭代表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>初始化表达式：通常用于 <strong>初始化一个或多个循环控制变量</strong> ，这个表达式只在循环开始前执行一次。</li>
<li>循环条件表达式：在每次迭代的开始处进行评估，如果为真，则执行循环体中的代码；如果为假，则循环结束。</li>
<li>迭代表达式：在循环体的代码执行之后，对循环控制变量进行更新。</li>
</ul>
<p>在某些情况下，这三个表达式都是可以省略的，但至少需要保留分号分隔符。例如：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="number">10</span>; ) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">        i++; <span class="comment">// 循环体内需要确保循环条件最终会变为假，否则会形成无限循环</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>在上面的例子中，初始化表达式被移动到了循环外，而迭代表达式在循环体内完成。</p>
<p>但是，如果 <strong>省略了循环条件表达式</strong> ，默认的条件是 <strong>真</strong> ，这会导致一个 <strong>无限循环</strong> ，除非在循环体内部有<code>break</code>语句或者修改循环控制变量来退出循环：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 这将创建一个无限循环</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 使用break语句来退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">// 循环体</span></span><br><span class="line">    i++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>此条来自于 ChatGLM</p>
</blockquote>
</li>
<li><p>三种循环的流程图：</p>
<div class="tabs" id="tab-"><ul class="nav-tabs"><li class="tab active"><a class="#-1">while循环</a></li><li class="tab"><a class="#-2">do-while循环</a></li><li class="tab"><a class="#-3">for循环</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/note-1.png"
                      alt="while循环"
                ></p></div><div class="tab-pane" id="-2"><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/note-2.png"
                      alt="do-while循环"
                ></p></div><div class="tab-pane" id="-3"><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/note-3.png"
                      alt="for循环"
                ></p></div></div></div></li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Blessing Skin皮肤站搭建/备份记录</title>
    <url>/posts/8093.html</url>
    <content><![CDATA[<p><meting-js server="netease" type="song" id="1965740189"></meting-js></p>
<h1 id="Blessing-Skin是什么"><a href="#Blessing-Skin是什么" class="headerlink" title="Blessing Skin是什么"></a>Blessing Skin是什么</h1><blockquote>
<p>你是否因在离线模式下运行的<strong>Minecraft</strong>服务器中丢失自定义皮肤而感到困惑？现在，借助Blessing Skin的帮助，你可以轻松地找回它们！<br>Blessing Skin是一个网络应用程序，在这里你可以上传、管理和分享你的自定义皮肤和披风！与修改资源包不同，游戏中的每个人都可以看到彼此的不同皮肤（当然，他们也应在同一个网站上注册）。<br>Blessing Skin是一个用PHP编写的开源项目，这意味着你可以自由地在自己的网络服务器上部署它！</p>
</blockquote>
<p>简而言之，它是一个适用于 <strong>Minecraft服务器</strong> 的，可让用户上传、管理和分享他们的 Minecraft 皮肤和披风的 Web 应用程序<br>配合某些插件可以做到 <strong>让玩家仅可使用皮肤站账号进入服务器</strong></p>
<p>Github地址：<a class="link"   href="https://github.com/bs-community/blessing-skin-server" >bs-community&#x2F;blessing-skin-server<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>官方文档地址：<a class="link"   href="https://blessing.netlify.app/" >Blessing Skin 手册 | Blessing Skin 用户手册<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h1><p>我的环境是一个 <code>1H512M</code> 的 Ubuntu 22.04，磁盘存储仅有5GB<br>但是这样的环境也能搭成功，可见Blessing Skin之轻量<br><del class="mask">其实是没钱买更高配的机子，大家别学我</del></p>
<p><strong>需要准备的东西：</strong></p>
<ul>
<li>一台能够搭建网站的服务器</li>
<li>一个自己的域名</li>
<li>一台电脑</li>
<li>一个脑子</li>
</ul>
<h2 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h2><p>先换源，如果你的机子是海外的可以不用换</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s@//.*archive.ubuntu.com@//mirrors.tuna.tsinghua.edu.cn@g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/http:/https:/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>更换为清华源，其中 中间那行是更换 <strong>安全更新</strong> 的源。由于镜像站更新有时不及时，使用镜像源的安全更新源可能会导致你无法及时获取到最新的安全更新，介意的可以不换</p>
<p>然后一套连招更新系统</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源 &amp;&amp; 更新软件包 &amp;&amp; 删除旧软件包</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt autoremove -y</span><br></pre></td></tr></table></figure></div>

<h2 id="安装一些小工具"><a href="#安装一些小工具" class="headerlink" title="安装一些小工具"></a>安装一些小工具</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install vim git zip -y</span><br></pre></td></tr></table></figure></div>

<h2 id="安装PHP及其相关拓展"><a href="#安装PHP及其相关拓展" class="headerlink" title="安装PHP及其相关拓展"></a>安装PHP及其相关拓展</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install apache2 php php-gd php-mbstring php-xml php-zip php-pgsql -y</span><br></pre></td></tr></table></figure></div>

<p>验证php版本：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure></div>

<h2 id="下载-blessing-skin-server"><a href="#下载-blessing-skin-server" class="headerlink" title="下载 blessing-skin-server"></a>下载 blessing-skin-server</h2>
  <div class="note p-4 mb-4 rounded-small info modern">
    <p>记得到 <a class="link"   href="https://github.com/bs-community/blessing-skin-server/releases" >GitHub Releases<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 页面确认最新版的下载链接</p>

  </div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/bs-community/blessing-skin-server/releases/download/6.0.2/blessing-skin-server-6.0.2.zip</span><br></pre></td></tr></table></figure></div>

<p>下不动的可以在前面加个镜像：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://mirror.ghproxy.com/github.com/bs-community/blessing-skin-server/releases/download/6.0.2/blessing-skin-server-6.0.2.zip</span><br></pre></td></tr></table></figure></div>

<h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /var/www/blessing-skin</span><br><span class="line">sudo unzip blessing-skin-server-6.0.2.zip -d /var/www/blessing-skin/</span><br></pre></td></tr></table></figure></div>

<h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R www-data:www-data /var/www/blessing-skin</span><br></pre></td></tr></table></figure></div>

<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/blessing-skin/</span><br><span class="line">sudo <span class="built_in">cp</span> .env.example .<span class="built_in">env</span></span><br><span class="line">sudo php artisan key:generate</span><br></pre></td></tr></table></figure></div>

<h2 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h2><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3>
  <div class="note p-4 mb-4 rounded-small info modern">
    <p>如果你希望给你的皮肤站启用 <code>HTTPS</code>，那么请跳到 <a href="#%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6%EF%BC%88HTTPS%EF%BC%89%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89">配置SSL证书（HTTPS）</a></p>

  </div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apache2/sites-available/blessing-skin.conf</span><br></pre></td></tr></table></figure></div>
<p>在编辑器中粘贴如下内容：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  ServerAdmin webmaster@localhost</span><br><span class="line">  DocumentRoot /var/www/blessing-skin/public</span><br><span class="line"></span><br><span class="line">  &lt;Directory /var/www/blessing-skin/public&gt;</span><br><span class="line">    AllowOverride All</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">  ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">  CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span><br></pre></td></tr></table></figure></div>

<h3 id="配置SSL证书（HTTPS）（推荐）"><a href="#配置SSL证书（HTTPS）（推荐）" class="headerlink" title="配置SSL证书（HTTPS）（推荐）"></a>配置SSL证书（HTTPS）（推荐）</h3><p>这里我们使用 Let’s Encrypt 来创建一个免费证书</p>
<ol>
<li><p>安装 Python</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">apt install python3 pip</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>pip换源</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>安装证书生成工具</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pip install certbot</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>设置域名解析<br>若想使用<code>Let&#39;s Encrypt</code>签发证书，就必须将涉及的域名先解析到服务器才行。<br>例如我们将预申请SSL证书域名 和 服务器IP地址的信息整理如下:</p>
<table>
<thead>
<tr>
<th>预申请SSL证书域名</th>
<th>服务器IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>yourdomain.com</td>
<td>114.51.41.9</td>
</tr>
</tbody></table>
</li>
</ol>
<p>在申请证书之前，须将该域名<code>yourdomain.com</code>的A记录解析到<code>114.51.41.9</code>。<br>在申请SSL证书的时候，我们需要在<code>114.51.41.9</code>服务器上操作certbot才行。</p>
<ol start="5">
<li>生成证书<br>先停止Apache服务（因为Apache会占用80端口）<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop apache2</span><br></pre></td></tr></table></figure></div>
随后使用<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">certbot certonly --standalone -d yourdomain.com</span><br></pre></td></tr></table></figure></div>
上述命令的意思是，启动独立的web服务进行身份验证，为<code>yourdomain.com</code>申请&#x2F;续订SSL证书，但是不需要自动安装。</li>
</ol>
<p>在此过程中，会弹出很多的选项，让我们输入,大概流程为:</p>
<ul>
<li>会让我们输入邮件地址，将用于续订和安全通知。</li>
<li>会让我们确定是否向<code>ACME server</code>注册。</li>
<li>是否分享你的邮件让EFF共享。<br>如果申请成功后，会在<code>/etc/letsencrypt/live/</code>下，以域名为目录，里面存储的证书信息，并且会告知过期时间是多久。</li>
</ul>
<p>以我的为例，我的域名是 <code>skin.mc.qiusyan.top</code>，所以它生成的证书会在 <code>/etc/letsencrypt/live/skin.mc.qiusyan.top</code> 目录下</p>
<p>它会自动生成两个文件：<code>privkey.pem</code> 和 <code>fullchain.pem</code></p>
<p>执行以下指令：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建证书文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> /var/www/blessing-skin/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书文件复制进去，自行修改对应目录</span></span><br><span class="line"><span class="built_in">cp</span> /etc/letsencrypt/live/skin.mc.qiusyan.top/fullchain.pem /var/www/blessing-skin/ssl/</span><br><span class="line"><span class="built_in">cp</span> /etc/letsencrypt/live/skin.mc.qiusyan.top/privkey.pem /var/www/blessing-skin/ssl/</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<!-- 你去找一个免费的证书创建服务，可以使用阿里云的免费证书创建服务
生成完之后，选择下载适用于 `apache` 服务器的证书

![](img/ssl-dl.png)
下载完成后，解压，会看到三个证书，类似于这样的：

![](img/ca.png)
将他们分别重命名为 `private.key`| `ca.crt` | `public.crt` （顺序从上至下）
然后将这三个文件上传至服务器的 `/var/www/blessing-skin/ssl/` 目录中（没有的话就手动创建一个） -->

<p>随后执行如下操作：</p>
<ol>
<li><p>修改文件权限</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> www-data:www-data -R /var/www/blessing-skin/ssl</span><br></pre></td></tr></table></figure></div></li>
<li><p>启用 Apache2 的 SSL 模块</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo a2enmod ssl</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>编辑 <code>/etc/apache2/sites-available/blessing-skin.conf</code> 配置文件<br><strong>注意：第十二行处的 ServerName后的域名需要修改为你自己的皮肤站域名</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_ssl.c&gt;</span><br><span class="line">  &lt;VirtualHost *:80&gt;</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    RewriteCond %&#123;HTTPS&#125; off</span><br><span class="line">    RewriteRule (.*) https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125;</span><br><span class="line">  &lt;/VirtualHost&gt;</span><br><span class="line">  &lt;VirtualHost *:443&gt;</span><br><span class="line">    ServerAdmin webmaster@localhost</span><br><span class="line">    DocumentRoot /var/www/blessing-skin/public</span><br><span class="line">    </span><br><span class="line">    # 此处修改为你自己的皮肤站域名</span><br><span class="line">    ServerName your_domain.com</span><br><span class="line">    SSLCertificateFile /var/www/blessing-skin/ssl/fullchain.pem</span><br><span class="line">    SSLCertificateKeyFile /var/www/blessing-skin/ssl/privkey.pem</span><br><span class="line"></span><br><span class="line">    &lt;Directory /var/www/blessing-skin/public&gt;</span><br><span class="line">      AllowOverride All</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">  &lt;/VirtualHost&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span><br></pre></td></tr></table></figure></div></li>
<li><p>重启 Apache2 服务使配置生效</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2.service</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="配置站点"><a href="#配置站点" class="headerlink" title="配置站点"></a>配置站点</h3><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用默认站点</span></span><br><span class="line">sudo a2dissite 000-default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 blessing-skin 站点</span></span><br><span class="line">sudo a2ensite blessing-skin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 rewrite 模块</span></span><br><span class="line">sudo a2enmod rewrite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 Apache 服务使配置生效</span></span><br><span class="line">sudo systemctl restart apache2.service</span><br></pre></td></tr></table></figure></div>

<h2 id="安装-配置-Postgresql"><a href="#安装-配置-Postgresql" class="headerlink" title="安装 &amp; 配置 Postgresql"></a>安装 &amp; 配置 Postgresql</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 postgresql</span></span><br><span class="line">sudo apt install postgresql -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到数据库用户</span></span><br><span class="line">sudo su postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入数据库管理工具</span></span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库密码，牢记你的密码，后面会用到</span></span><br><span class="line">\password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建皮肤站数据库</span></span><br><span class="line">CREATE DATABASE blessingskin;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出管理工具</span></span><br><span class="line">\q</span><br></pre></td></tr></table></figure></div>

<p>修改 <code>/etc/postgresql/14/main/postgresql.conf</code> 文件第 60 行取消注释，允许本地登入数据库。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen_addresses = &#x27;localhost&#x27;          # what IP address(es) to listen on;</span><br></pre></td></tr></table></figure></div>


<p>重启服务使配置生效：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart postgresql.service</span><br></pre></td></tr></table></figure></div>

<h2 id="安装-Redis-（可选）"><a href="#安装-Redis-（可选）" class="headerlink" title="安装 Redis （可选）"></a>安装 Redis （可选）</h2><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install redis php-redis</span><br></pre></td></tr></table></figure></div>

<p>配置请参考 <a class="link"   href="https://blessing.netlify.app/env.html#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%AD%97%E6%AE%B5%E8%AF%A6%E8%A7%A3" >配置文件介绍 - Redis 相关<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="运行安装向导"><a href="#运行安装向导" class="headerlink" title="运行安装向导"></a>运行安装向导</h2><p>现在访问主机 IP 可以看到欢迎页面了，记得选择数据库类型为 PostgreSQL：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/setup-database.png"
                     
                ></p>
<p>恭喜，你的皮肤站已经部署完成！<br>更多的内容就自己去探索吧~<br>善用官方文档与搜索引擎：<a class="link"   href="https://blessing.netlify.app/" >Blessing Skin 手册 | Blessing Skin 用户手册<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="备份-恢复相关"><a href="#备份-恢复相关" class="headerlink" title="备份 &amp; 恢复相关"></a>备份 &amp; 恢复相关</h1><p>咳咳，这一段其实才是我写这篇文章的初衷<br>写一下备份&amp;恢复相关的步骤免得自己忘了</p>
<p>好的，假设你有一个已经架设好了的 Blessing Skin 皮肤站，然而现在遇到了一个问题使得你需要 <strong>备份你的数据并且日后要恢复正常运行</strong>，那么就往下看</p>
<h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><p>先切换到 <code>postgres</code> 用户并且切换到对应目录：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo su postgres</span><br><span class="line"><span class="built_in">cd</span></span><br></pre></td></tr></table></figure></div>

<p>然后使用 <code>pg_dump</code> 命令备份数据库：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pg_dump -U postgres blessingskin &gt; blessingskin_backup.sql</span><br></pre></td></tr></table></figure></div>

  <div class="note p-4 mb-4 rounded-small info modern">
    <p>此处指令的 <code>blessingskin</code> 为你要导出的数据库名称，<code>blessingskin_backup.sql</code> 是备份后的文件名称</p>

  </div>

<p>导出之后可以使用 <code>pwd</code> 指令来查看当前目录，你的备份文件也会在这里。随后使用 <code>Filezilla</code> 之类的 SFTP 软件将其下载到本地即可。</p>
<h3 id="备份站点文件"><a href="#备份站点文件" class="headerlink" title="备份站点文件"></a>备份站点文件</h3><p><strong>记得先切换回原用户</strong></p>
<p>切换到你的皮肤站站点目录的上一级目录</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www</span><br></pre></td></tr></table></figure></div>
<p>将其打包 or 压缩</p>
<ul>
<li><p><strong>打包</strong>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">tar -cvf blessingskin.tar blessingskin</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>压缩</strong>：</p>

  <div class="note p-4 mb-4 rounded-small info modern">
    <p>使用7z指令压缩需要安装 <code>p7zip-full</code> 软件包</p>

  </div>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">7z a -t7z -r blessingskin.7z /var/www/blessingskin</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>二者选其一即可。<br>随后将打包后的文件下载到本地就完成备份了。</p>
<p><del class="mask">如果你的服务器是像我那样的小破机子就只能用打包了，用不了7z压缩</del><br><del class="mask">不是都说了不要学我吗啊喂</del></p>
<h2 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h2><blockquote>
<p><strong>你的环境应该是全新的</strong></p>
</blockquote>
<p>准备工作</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 换源</span></span><br><span class="line">sudo sed -i <span class="string">&#x27;s@//.*archive.ubuntu.com@//mirrors.tuna.tsinghua.edu.cn@g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/http:/https:/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新软件源 &amp;&amp; 更新软件包 &amp;&amp; 删除旧软件包</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt autoremove -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装工具</span></span><br><span class="line">sudo apt install vim git zip p7zip-full -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装php及其相关拓展</span></span><br><span class="line">sudo apt install apache2 php php-gd php-mbstring php-xml php-zip php-pgsql -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装postgres</span></span><br><span class="line">sudo apt install postgresql -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到数据库用户</span></span><br><span class="line">sudo su postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入数据库管理工具</span></span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库密码，建议和之前的密码一样，如果不记得了可以去查看皮肤站站点文件内.env文件中的DB_PASSWORD配置项</span></span><br><span class="line">\password</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建皮肤站数据库，建议和之前的数据库名称一样，如果不记得了可以去查看皮肤站站点文件内.env文件中的DB_DATABASE配置项</span></span><br><span class="line">CREATE DATABASE blessingskin;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出管理工具</span></span><br><span class="line">\q</span><br></pre></td></tr></table></figure></div>

<p>随后进入数据库恢复工作：</p>
<blockquote>
<p><strong>记得先将你的备份文件 <code>blessingskin_backup.sql</code> 上传到 <code>/var/lib/postgresql</code>目录下</strong></p>
</blockquote>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到数据库用户</span></span><br><span class="line">sudo su postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到对应工作目录</span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复备份</span></span><br><span class="line">psql -U postgres -d blessingskin -f blessingskin_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># blessingskin 是你想将备份文件导入的数据库的名称，blessingskin_backup.sql是你备份的文件</span></span><br></pre></td></tr></table></figure></div>

<p>然后进入 <code>/var/www</code> 目录下，并且将你的 <code>皮肤站站点文件备份</code> 上传至此<br>解压缩至当前目录：</p>
<ul>
<li><code>.tar</code> 文件<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># blessingskin.tar 请自行更改为对应文件名</span></span><br><span class="line">tar -xvf blessingskin.tar </span><br></pre></td></tr></table></figure></div></li>
<li><code>.7z</code> 文件<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># blessingskin.7z 请自行更改为对应文件名</span></span><br><span class="line">7z x blessingskin.7z -r -o/var/www/blessingskin</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>记得修改目录权限</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R www-data:www-data /var/www/blessing-skin</span><br></pre></td></tr></table></figure></div>

<p>接下来的步骤就是配置 Apache 了，按照 <a href="#%E9%85%8D%E7%BD%AE-Apache">配置 Apache</a> 来就行了<br>配置完Apache之后，恢复工作就大功告成了！</p>
<p><strong>有啥问题的可以在当前页面留言~ 💖</strong></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a class="link"   href="https://blessing.netlify.app/" >Blessing Skin 手册 | Blessing Skin 用户手册<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Blessing Skin</tag>
        <tag>Minecraft皮肤站</tag>
        <tag>丐版服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Typecho 便捷式更改 评论Gravatar头像源</title>
    <url>/posts/13132.html</url>
    <content><![CDATA[<blockquote>
<p><strong>Cravatar 是 Gravatar 在中国的完美替代品。</strong> </p>
</blockquote>
<hr>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>将以下代码加到站点根目录的 config.inc.php 中即可：</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换Gravatar头像为Cravatar头像</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Cravatar是Gravatar在中国的完美替代方案，你可以在https://cravatar.cn更新你的头像</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;__TYPECHO_GRAVATAR_PREFIX__&#x27;</span>, <span class="string">&#x27;https://cravatar.cn/avatar/&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a class="link"   href="https://cravatar.cn/developers/for-typecho" >「 为 Typecho 集成 - Cravatar 」<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Typecho</tag>
        <tag>Cravatar</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装neofetch</title>
    <url>/posts/36696.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small info modern">
    <p>记录一下，万一以后忘了呢</p>

  </div>

<hr>
<p>CentOS7自带软件源内并无<code>neofetch</code>，我们需要手动添加软件源，</p>
<blockquote>
<p>所有操作系统自带软件源内无此软件的，安装步骤大致为：添加软件源、导入密钥、刷新包管理器缓存、使用包管理器安装该软件</p>
</blockquote>
<h2 id="安装-epel-release"><a href="#安装-epel-release" class="headerlink" title="安装 epel-release"></a>安装 epel-release</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure></div>

<h2 id="添加第三方软件源"><a href="#添加第三方软件源" class="headerlink" title="添加第三方软件源"></a>添加第三方软件源</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -o /etc/yum.repos.d/konimex-neofetch-epel-7.repo https://copr.fedorainfracloud.org/coprs/konimex/neofetch/repo/epel-7/konimex-neofetch-epel-7.repo</span><br></pre></td></tr></table></figure></div>

<h2 id="使用包管理器安装-neofetch"><a href="#使用包管理器安装-neofetch" class="headerlink" title="使用包管理器安装 neofetch"></a>使用包管理器安装 neofetch</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install neofetch</span><br></pre></td></tr></table></figure></div>

<h2 id="安装成功！"><a href="#安装成功！" class="headerlink" title="安装成功！"></a>安装成功！</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.qiusyan.top/img/20230713162746.png"
                      alt="安装成功"
                ></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念</title>
    <url>/posts/29935.html</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1bd4e7c36e303c33eff548ec2ed3701aa4961694667253c11572fe0acdf4b4c1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>Flarum搭建记录（远程数据库）</title>
    <url>/posts/27098.html</url>
    <content><![CDATA[<p>最近心血来潮想搞个论坛玩玩，就顺便记录一下搭建过程吧。</p>

  <div class="note-large red">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>小心高血压</p>

    </div>
    <div class="notel-content">
      <p><strong>此文仅用于记录一个搭建思路，千万千万千万不要学我用远程数据库</strong><br><strong>远程数据库真的不能用在生产环境，像Umami这样的还好，没多少查询，但是如果像是Flarum这种高频查询的程序嘛…</strong><br><strong>3&#x2F;4的时间都耗在数据库查询上了</strong></p>

    </div>
  </div>

<p><meting-js server="netease" type="song" id="22197007"></meting-js></p>
<h3 id="Flarum简介"><a href="#Flarum简介" class="headerlink" title="Flarum简介"></a>Flarum简介</h3><blockquote>
<p>Flarum 是一款非常简洁的开源论坛软件。 它响应快速、简便易用，拥有打造一片成功的社区所需的所有功能。 它也极其可扩展，允许达到终极的可定制性。</p>
<p>Flarum 的前身是 <a class="link"   href="https://github.com/esotalk/esoTalk" >esoTalk<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 和 <a class="link"   href="https://fluxbb.org/" >FluxBB<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>， 它生来就被设计如此：</p>
<ul>
<li><strong>快速、简单。</strong> 不杂乱不臃肿，没有复杂的依赖关系。 Flarum 使用 PHP 构建，因此很容易被部署。 界面采用高性能且小巧的 JavaScript 框架 <a class="link"   href="https://mithril.js.org/" >Mithril<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
<li><strong>漂亮、响应式。</strong> 以人为本的论坛软件。 Flarum 被精心设计以在不同平台间保持一致性和直观性，开箱即用。</li>
<li><strong>强大、可扩展。</strong> 您可以客制化、扩展或集成 Flarum 以满足您的社区需求。 Flarum 基于 <a class="link"   href="https://github.com/flarum/flarum/blob/master/LICENSE" >MIT 协议<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 发布。</li>
<li><strong>免费、开源。</strong> Flarum 以 <a class="link"   href="https://github.com/flarum/flarum/blob/master/LICENSE" >MIT 许可证<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 发布。</li>
</ul>
<p>你可以在这里阅读更多关于我们 <a class="link"   href="https://discuss.flarum.org/d/28869-flarum-philosophy-and-values" >对于 Flarum 的哲学和价值观<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 的信息。</p>
</blockquote>
<blockquote>
<p>以上内容来自于 <a class="link"   href="https://docs.flarum.org/zh/" >Flarum Documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>官方论坛：<a class="link"   href="https://discuss.flarum.org/" >Flarum 社区 — Flarum Community<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>官方文档：<a class="link"   href="https://docs.flarum.org/zh/" >README | Flarum Documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>中文社区论坛：<a class="link"   href="https://discuss.flarum.org.cn/" >Flarum 中文社区<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="需要的东西"><a href="#需要的东西" class="headerlink" title="需要的东西"></a>需要的东西</h3><ul>
<li>一台服务器，最好配置高一点（本文用的是 Ubuntu 22.04</li>
<li>一个域名</li>
<li>一台电脑</li>
<li>一个脑子</li>
</ul>
<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3>
  <div class="note p-4 mb-4 rounded-small red">
    <p>真的不要选那种丐版服务器</p>

  </div>

<p>在开始之前讲一下我的思路吧。<br>由于我能用于搭建网站的服务器有且仅有一台，而且还是那种 <strong>1H512M 5GSSD</strong> 的超级丐版机子<br>然后呢，我又想同时部署皮肤站和论坛，所以在服务器上面安装Mysql是不大可能了的</p>
<blockquote>
<p>因为BlessingSkin用的是Postgresql，而目前版本的Flarum仅支持Mysql作为数据库。如果把数据从Postgresql迁移到Mysql会很麻烦 <del class="mask">主要是我不会</del></p>
</blockquote>
<p>于是我选择了云端数据库作为我的论坛数据库，论坛的本体还是在我这服务器上的。<br><del class="mask">Flarum要蛮多php拓展的，我到哪去给你找能满足这些条件的免费服务啊.jpg</del></p>
<p>于是我就开始找免费的支持Mysql的云端数据库，我选的是 TiDB Cloud.</p>

  <div class="note p-4 mb-4 rounded-small green icon-padding">
    <i class="note-icon fa-solid fa-heart"></i><p>非常感谢此文 <a class="link"   href="https://blog.freeblock.cn/post/16" >国内外免费云数据库汇总<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>

  </div>
<p>但是问题来了，要连接TiDB数据库的话需要使用TLS，而安装Flarum的时候并没有相关选项，得修改代码<br><del class="mask">这就是我要水啊不是，写这篇文章的原因，不然直接看文档安装就行</del></p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><h4 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h4><p>先换源，如果你的机子是海外的可以不用换</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s@//.*archive.ubuntu.com@//mirrors.tuna.tsinghua.edu.cn@g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sudo sed -i <span class="string">&#x27;s/http:/https:/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>更换为清华源，其中 中间那行是更换 <strong>安全更新</strong> 的源。由于镜像站更新有时不及时，使用镜像源的安全更新源可能会导致你无法及时获取到最新的安全更新，介意的可以不换</p>
<p>然后一套连招更新系统</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源 &amp;&amp; 更新软件包 &amp;&amp; 删除旧软件包</span></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y &amp;&amp; sudo apt autoremove -y</span><br></pre></td></tr></table></figure></div>

<h4 id="安装一些小工具"><a href="#安装一些小工具" class="headerlink" title="安装一些小工具"></a>安装一些小工具</h4><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install vim git zip -y</span><br></pre></td></tr></table></figure></div>

<h4 id="安装PHP及其相关拓展"><a href="#安装PHP及其相关拓展" class="headerlink" title="安装PHP及其相关拓展"></a>安装PHP及其相关拓展</h4><div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install apache2 php php-gd php-mbstring php-curl php-mysql php-zip -y</span><br></pre></td></tr></table></figure></div>

<p>验证php版本：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure></div>

<h4 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h4><p>为了方便，我直接用的是腾讯源的文件</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载本体文件</span></span><br><span class="line">wget https://mirrors.tencent.com/composer/composer.phar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予执行权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> +x composer.phar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局启用 `composer` 指令</span></span><br><span class="line">sudo <span class="built_in">mv</span> composer.phar  /usr/local/bin/composer</span><br></pre></td></tr></table></figure></div>

<p>切换源至腾讯源</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">composer config -g repos.packagist composer https://mirrors.tencent.com/composer/</span><br></pre></td></tr></table></figure></div>

<p>验证安装</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">composer -V</span><br></pre></td></tr></table></figure></div>
<h4 id="安装-Flarum"><a href="#安装-Flarum" class="headerlink" title="安装 Flarum"></a>安装 Flarum</h4><h5 id="通过命令行安装"><a href="#通过命令行安装" class="headerlink" title="通过命令行安装"></a>通过命令行安装</h5><p>Flarum官方给出的建议是使用 <code>Composer</code> 安装，指令如下：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">composer create-project flarum/flarum .</span><br></pre></td></tr></table></figure></div>

  <div class="note p-4 mb-4 rounded-small green icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p>注意：是要在 <strong>你想安装Flarum的</strong> <strong>空目录</strong> 里面执行 </p>

  </div>

<blockquote>
<p>比如说，你想把flarum安装在 <code>/var/www/flarum</code> ，那么你就去 <code>/var/www</code> 下新建一个名为 <code>flarum</code> 的目录，然后cd进去，执行指令就行了</p>
</blockquote>
<h5 id="通过解压缩归档进行安装"><a href="#通过解压缩归档进行安装" class="headerlink" title="通过解压缩归档进行安装"></a>通过解压缩归档进行安装</h5><p>我的安装方法是直接解压文件，因为Composer安装项目依赖的时候会占用比较高的内存，我这个小破服务器一用Composer安装就被Kill了（悲</p>
<p>创建目录</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /var/www/flarum</span><br><span class="line"><span class="built_in">cd</span> /var/www/flarum</span><br></pre></td></tr></table></figure></div>
<p>下载压缩文件</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://github.com/flarum/installation-packages/raw/main/packages/v1.x/flarum-v1.x-php8.1.zip</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>官方给出的所有已经打包好了的Flarum本体文件下载链接：<a class="link"   href="https://docs.flarum.org/zh/install#%E9%80%9A%E8%BF%87%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%BD%92%E6%A1%A3%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85" >安装 | Flarum Documentation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，根据你自己的php版本和需求来选择</p>
</blockquote>
<p>随后解压</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">unzip *.zip</span><br></pre></td></tr></table></figure></div>

<p>修改文件权限</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自行修改路径</span></span><br><span class="line"><span class="built_in">chown</span> -R www-data:www-data /var/www/flarum</span><br></pre></td></tr></table></figure></div>

<h4 id="修改安装文件"><a href="#修改安装文件" class="headerlink" title="修改安装文件"></a>修改安装文件</h4>
  <div class="note p-4 mb-4 rounded-small green icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p>如果你使用的是本地数据库或者其他不用TLS连接的数据库可跳过此节 </p>

  </div>


<p>前面说了，我用的是TiDB，它连接到数据库时需要用TLS连接，不然会报错</p>
<p>编辑 <code>vendor/flarum/core/src/Install/DatabaseConfig.php</code> 文件，修改内容为：</p>
<div class="code-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file is part of Flarum.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For detailed copyright and license information, please view the</span></span><br><span class="line"><span class="comment"> * LICENSE file that was distributed with this source code.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Flarum</span>\<span class="title class_">Install</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Support</span>\<span class="title">Arrayable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PDO</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseConfig</span> <span class="keyword">implements</span> <span class="title">Arrayable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$driver</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$host</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$port</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$database</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$prefix</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sslCa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$driver</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$host</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$port</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$database</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$username</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$password</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$prefix</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="variable">$sslCa</span> = <span class="string">&#x27;/etc/ssl/certs/ca-certificates.crt&#x27;</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;driver = <span class="variable">$driver</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;port = <span class="variable">$port</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;database = <span class="variable">$database</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;prefix = <span class="variable">$prefix</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sslCa = <span class="variable">$sslCa</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">validate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$config</span> = [</span><br><span class="line">            <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;driver,</span><br><span class="line">            <span class="string">&#x27;host&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;host,</span><br><span class="line">            <span class="string">&#x27;port&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;port,</span><br><span class="line">            <span class="string">&#x27;database&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;database,</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;username,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;password,</span><br><span class="line">            <span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8mb4&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;collation&#x27;</span> =&gt; <span class="string">&#x27;utf8mb4_unicode_ci&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;prefix,</span><br><span class="line">            <span class="string">&#x27;strict&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;engine&#x27;</span> =&gt; <span class="string">&#x27;InnoDB&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;prefix_indexes&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;options&#x27;</span> =&gt; [</span><br><span class="line">                PDO::<span class="variable constant_">MYSQL_ATTR_SSL_CA</span> =&gt; <span class="variable language_">$this</span>-&gt;sslCa,</span><br><span class="line">                PDO::<span class="variable constant_">MYSQL_ATTR_SSL_VERIFY_SERVER_CERT</span> =&gt; <span class="literal">true</span></span><br><span class="line">            ]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$config</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;driver)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;Please specify a database driver.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;driver !== <span class="string">&#x27;mysql&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;Currently, only MySQL/MariaDB is supported.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;host)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;Please specify the hostname of your database server.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="title function_ invoke__">is_int</span>(<span class="variable">$this</span>-&gt;port) || <span class="variable language_">$this</span>-&gt;port &lt; <span class="number">1</span> || <span class="variable language_">$this</span>-&gt;port &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;Please provide a valid port number between 1 and 65535.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;database)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;Please specify the database name.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;database)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;The database name must be a non-empty string.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;Please specify the username for accessing the database.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;database)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;The username must be a non-empty string.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;prefix)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[\pL\pM\pN_]+$/u&#x27;</span>, <span class="variable">$this</span>-&gt;prefix)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;The prefix may only contain characters and underscores.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;prefix) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidationFailed</span>(<span class="string">&#x27;The prefix should be no longer than 10 characters.&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要是加了 <code>PDO::MYSQL_ATTR_SSL_CA</code> 和 <code>PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT</code> 这两个配置项，用于默认对数据库连接启用TLS</p>
<h4 id="Apache相关"><a href="#Apache相关" class="headerlink" title="Apache相关"></a>Apache相关</h4><p>新建Apache站点配置文件 <code>/etc/apache2/sites-available/flarum.conf</code>：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_ssl.c&gt;</span><br><span class="line">  &lt;VirtualHost *:80&gt;</span><br><span class="line">    RewriteEngine On</span><br><span class="line">    RewriteCond %&#123;HTTPS&#125; off</span><br><span class="line">    RewriteRule (.*) https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125;</span><br><span class="line">  &lt;/VirtualHost&gt;</span><br><span class="line">  &lt;VirtualHost *:443&gt;</span><br><span class="line">    ServerAdmin webmaster@localhost</span><br><span class="line"></span><br><span class="line">    # 此处修改为你的对应目录</span><br><span class="line">    DocumentRoot /var/www/flarum/public </span><br><span class="line">    </span><br><span class="line">    # 此处修改为你自己的论坛域名</span><br><span class="line">    ServerName flarum.qiusyan.us.kg</span><br><span class="line"></span><br><span class="line">    # 此处修改为你自己的证书文件</span><br><span class="line">    SSLCertificateFile /etc/letsencrypt/live/flarum.qiusyan.us.kg/fullchain.pem</span><br><span class="line">    SSLCertificateKeyFile /etc/letsencrypt/live/flarum.qiusyan.us.kg/privkey.pem</span><br><span class="line"></span><br><span class="line">    # 此处修改为你的对应目录</span><br><span class="line">    &lt;Directory /var/www/flarum/public&gt;</span><br><span class="line">      AllowOverride All</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">  &lt;/VirtualHost&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line"># vim: syntax=apache ts=4 sw=4 sts=4 sr noet</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>证书文件生成相关可前往 <a href="/posts/8093.html#%E9%85%8D%E7%BD%AESSL%E8%AF%81%E4%B9%A6%EF%BC%88HTTPS%EF%BC%89%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89">Blessing Skin 皮肤站搭建 &#x2F; 备份记录 - 配置SSL证书</a> 部分查看，此处不再赘述</p>
</blockquote>
<p>站点和模块相关配置</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 禁用默认站点</span></span><br><span class="line">sudo a2dissite 000-default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 flarum 站点</span></span><br><span class="line">sudo a2ensite flarum.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 rewrite 模块</span></span><br><span class="line">sudo a2enmod rewrite</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用 ssl 模块</span></span><br><span class="line">sudo a2enmod ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 Apache 服务使配置生效</span></span><br><span class="line">sudo systemctl restart apache2.service</span><br></pre></td></tr></table></figure></div>

<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>这部分没什么好说的，打开浏览器，输入你的域名，进入安装页面，正常安装就行</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>其他的扩展&#x2F;配置啥的自行探索吧，实在是不想写了（x</p>
<p>如果你不想搞也可以用 <a class="link"   href="https://freeflarum.com/" >Freeflarm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>只是官方目前还没有上架 <strong>支持中文搜索</strong> 的扩展，所以使用体验可能不是很好<br>真要搞个论坛还是建议自己整个服务器搭一个</p>
<p>话说我想在我那小机子上面试试同时安装Mysql和Postgresql（挠头<br>不知道会不会炸（x</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>丐版服务器</tag>
        <tag>flarum</tag>
        <tag>TiDB</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的Hexo-Butterfly添加Giscus评论系统</title>
    <url>/posts/61913.html</url>
    <content><![CDATA[<p>记录一下配置Giscus评论系统的过程</p>
<p><meting-js server="netease" type="song" id="1888864514"></meting-js></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>由 <a class="link"   href="https://docs.github.com/en/discussions" >GitHub Discussions<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 驱动的评论系统。让访客借助 GitHub 在你的网站上留下评论和反应吧！本项目受 <a class="link"   href="https://github.com/utterance/utterances" >utterances<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 强烈启发。</p>
<ul>
<li><a class="link"   href="https://github.com/giscus/giscus" >开源<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。🌏</li>
<li>无跟踪，无广告，永久免费。📡 🚫</li>
<li>无需数据库。全部数据均储存在 GitHub Discussions 中。</li>
<li>支持<a class="link"   href="https://github.com/giscus/giscus/blob/main/ADVANCED-USAGE.md#data-theme" >自定义主题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>！🌗</li>
<li>支持<a class="link"   href="https://github.com/giscus/giscus/blob/main/CONTRIBUTING.md#adding-localizations" >多种语言<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。🌐</li>
<li><a class="link"   href="https://github.com/giscus/giscus/blob/main/ADVANCED-USAGE.md" >高度可配置<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。🔧</li>
<li>自动从 GitHub 拉取新评论与编辑。🔃</li>
<li><a class="link"   href="https://github.com/giscus/giscus/blob/main/SELF-HOSTING.md" >可自建服务<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>！🤳</li>
</ul>
</blockquote>
<p>详细介绍请看 <a class="link"   href="https://giscus.app/zh-CN" >Giscus官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h3><p>名称随意。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/new-repo.png"
                      alt="创建新仓库"
                ></p>
<h3 id="安装Giscus"><a href="#安装Giscus" class="headerlink" title="安装Giscus"></a>安装Giscus</h3><p>点击此链接安装：<a class="link"   href="https://github.com/apps/giscus" >Github Apps - giscus<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/install-giscus.png"
                      alt="点击安装"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/install-giscus-2.png"
                      alt="选择要安装的仓库"
                ></p>
<p>在这里，你可以选安装到全局也可以选择安装到某一个仓库（这个其实无所谓，后面可以改</p>
<p>然后点击 <strong>Install</strong> 安装</p>
<h3 id="配置仓库Discuss部分"><a href="#配置仓库Discuss部分" class="headerlink" title="配置仓库Discuss部分"></a>配置仓库Discuss部分</h3><p>打开你的仓库链接，点击 <strong>Settings</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/config-giscus-1.png"
                      alt="点击 Settings"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/config-giscus-2.png"
                      alt="用Ctrl+F寻找"
                ><br>找到<strong>Discussion</strong>后，将方框勾选即可。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/config-giscus-3.png"
                      alt="勾选完毕"
                ></p>
<p>随后点击 <strong>Set up discussions</strong>，进入Discussions配置界面。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/config-giscus-4.png"
                      alt="创建Announcements板块"
                ></p>
<p>点击 <strong>Start discussion</strong>即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/config-giscus-5.png"
                      alt="好耶撒花！"
                ></p>
<h3 id="进入Giscus配置"><a href="#进入Giscus配置" class="headerlink" title="进入Giscus配置"></a>进入Giscus配置</h3><p>传送门：<a class="link"   href="https://giscus.app/zh-CN" >Giscus官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>找到此处，在输入框内填写你的仓库信息，格式 <code>myusername/myrepo</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/giscus1.png"
                      alt="在这里填写"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/giscus2.png"
                      alt="成功"
                ></p>
<p>然后将 <code>页面 ↔️ discussion 映射关系</code>处的选项改为<code>Discussion 的标题包含页面的 URL</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/giscus3.png"
                      alt="如图所示"
                ><br>分类则选择刚刚创建的<strong>Announcements</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/giscus4.png"
                      alt="选择分类"
                ></p>
<p>配置完上述部分后，可以在<strong>启动giscus</strong>处复制几个必要的值</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/giscus5.png"
                      alt="如图所示"
                ></p>
<p>将上一步复制的数值填到butterfly主题配置文件即可</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Giscus</span></span><br><span class="line"><span class="comment"># https://giscus.app/</span></span><br><span class="line"><span class="attr">giscus:</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">repo_id:</span></span><br><span class="line">  <span class="attr">category_id:</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure></div>

<p><strong>注意！</strong></p>
<ul>
<li>请将<strong>启用giscus</strong>处复制的<code>data-repo</code>的值粘贴至<strong>butterfly</strong>主题配置文件中的<code>repo</code>处；</li>
<li>将<code>data-repo-id</code>处复制的值粘贴值配置文件中的<code>repo-id</code>处；</li>
<li>将<code>data-category-id</code>处复制的值粘贴至配置文件中的<code>category-id</code>处。</li>
</ul>

  <div class="note p-4 mb-4 rounded-small warning modern">
    <p>复制的值不需要引号</p>

  </div>


<h2 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h2><p>配置完并且保存后，通过<code>hexo s</code>就能看到你的评论区啦<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/giscus-over.png"
                      alt="大功告成！"
                ></p>
<hr>
<p><strong>有任何疑问欢迎留言！💖</strong></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Giscus</tag>
      </tags>
  </entry>
  <entry>
    <title>给你的Hexo-Butterfly加入说说功能</title>
    <url>/posts/48887.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small info">
    <p>2024&#x2F;3&#x2F;10更新： 我已经从HexoPlusPlus的说说功能换成Giscus了，具体灵感见 <a class="link"   href="https://github.com/jerryc127/hexo-theme-butterfly/issues/1290#issuecomment-1701325604" >#1290<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。如何给博客安装见此文 <a href="/posts/61913.html">给你的Hexo-Butterfly添加Giscus评论系统</a> </p>

  </div>


<hr>
<p>整了一个上午，终于搞好了<br>主要是原仓库现在archived了，作者没在维护了，cdn失效了<br>于是我就fork了一份然后修改了下<br>勉强能用<br>可以前往 <a href="/natter">说说</a> 查看效果</p>
<p><meting-js server="netease" type="song" id="1936315785"></meting-js></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们使用 <code>HexoPlusPlus</code> 给 <code>Hexo-Butterfly</code> 添加说说功能。</p>

  <div class="note p-4 mb-4 rounded-small info">
    <p>想要使用 <code>HexoPlusPlus</code> 需要先完成 Hexo集成部署，详见此文： <a href="/posts/62801/#Hexo%E9%9B%86%E6%88%90%E9%83%A8%E7%BD%B2">Windows 下简易 Hexo 部署教程 | QiuSYan’s Blog</a></p>

  </div>

<p>HexoPlusPlus项目地址：<a class="link"   href="https://github.com/HexoPlusPlus/HexoPlusPlus" >HexoPlusPlus&#x2F;HexoPlusPlus<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>HexoPlusPlus官方文档：<a class="link"   href="https://hexoplusplus.js.org/start/" >快速上手 | HexoPlusPlus<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>我猜有人会问：为什么不用Artitalk呢<br>因为Artitalk使用LeanCloud为后端，并且需要绑定自己的域名。<br>如果你域名没备案的话那就只能用LeanCloud国际版，但问题是LeanCloud国际版默认的服务域名是被墙了的…<br>Artitalk部署的话好像是要一个自己的域名，还要一个它默认提供的域名（？<br>不清楚，好久之前弄过的，忘了<br>如果现在用国际版能部署的话请在评论区告诉我</p>
</blockquote>
<h2 id="部署HexoPlusPlus"><a href="#部署HexoPlusPlus" class="headerlink" title="部署HexoPlusPlus"></a>部署HexoPlusPlus</h2><p>HexoPlusPlus官方文档已经写了很详细了，按照它的说明一步步来就行，此处不再赘述。</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p><strong>请注意，此处 文档说要从Github下载的代码请更换为 <a class="link"   href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/QSlotus/HexoPlusPlus/main/index.js" >我修改cdn后的代码<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>

  </div>

<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/hpp.png"
                      alt="就是这个地方"
                ></p>
</blockquote>
<p>其他的按官方文档的来就行。</p>
<h2 id="将HexoPlusPlus说说添加至Hexo-Butterfly"><a href="#将HexoPlusPlus说说添加至Hexo-Butterfly" class="headerlink" title="将HexoPlusPlus说说添加至Hexo-Butterfly"></a>将HexoPlusPlus说说添加至Hexo-Butterfly</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在博客根目录下用管理员权限运行CMD，输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-hpptalk --save</span><br></pre></td></tr></table></figure></div>
<p>以安装适配插件。</p>
<h3 id="添加配置信息"><a href="#添加配置信息" class="headerlink" title="添加配置信息"></a>添加配置信息</h3><p>请在 <strong>主题配置文件</strong> 或 <strong>站点配置文件</strong> 中加入以下配置： </p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HexoPlusPlus Talk</span></span><br><span class="line"><span class="comment"># see https://hexoplusplus.js.org</span></span><br><span class="line"><span class="attr">hpptalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">domain:</span> <span class="string">yourdomain</span> <span class="comment"># 请自行更改</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">talk</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">8</span></span><br><span class="line">  <span class="attr">start:</span> <span class="number">0</span> </span><br><span class="line">  <span class="attr">js:</span> <span class="string">https://fastly.jsdelivr.net/gh/QSlotus/HexoPlusPlus@latest/talk_user.js</span></span><br><span class="line">  <span class="attr">css:</span> <span class="string">https://fastly.jsdelivr.net/gh/QSlotus/HexoPlusPlus@latest/talk.css</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  <span class="attr">front_matter:</span> </span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>domain</td>
<td>【必须】你的 HexoPlusPlus 自定义域名，如 admin.qiusyan.top</td>
</tr>
<tr>
<td>path</td>
<td>【可选】hpptalk 的路径名称（默认为 <code>hpptalk</code> 生成的页面为 hpptalk&#x2F;index.html）</td>
</tr>
<tr>
<td>limit</td>
<td>【可选】单次获取的最多条数（默认 <code>8</code>）</td>
</tr>
<tr>
<td>start</td>
<td>【可选】从第几条开始（默认 <code>0</code>）</td>
</tr>
<tr>
<td>js</td>
<td>【可选】更换 hpptalk 的 JS CDN（默认：<code>https://cdn.jsdelivr.net/gh/HexoPlusPlus/HexoPlusPlus@latest/talk_user.js</code>)</td>
</tr>
<tr>
<td>css</td>
<td>【可选】更换 hpptalk 的 CSS CDN（默认 <code>https://cdn.jsdelivr.net/gh/HexoPlusPlus/HexoPlusPlus@latest/talk.css</code>）</td>
</tr>
<tr>
<td>option</td>
<td>【可选】hpptalk 需要的额外配置</td>
</tr>
<tr>
<td>front_matter</td>
<td>【可选】hpptalk 页面的 front_matter 配置</td>
</tr>
</tbody></table>
<p>完成！你现在可以通过访问 <code>你的博客域名/talk</code> 来查看你的说说页面了。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>HexoPlusPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Cursor之无限续杯</title>
    <url>/posts/34744.html</url>
    <content><![CDATA[<p><meting-js server="netease" id="2668056312" type="song"></meting-js></p>

  <div class="note-large white">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>咕咕咕</p>

    </div>
    <div class="notel-content">
      <p>这篇早就想写了奈何一直拖着不想动<br>大抵是因为体内的咕咕基因发作了罢（笑</p>

    </div>
  </div>

<p><a class="link"   href="https://cursor.com/" >Cursor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 是一个可以用LLM辅助你写代码的IDE，使用开源的 <code>Visual Studio Code</code> 修改而来。<br>其实这种类似的东西早就有了，比如说 <strong>阿里的通义灵码</strong> 就可以 以插件形式装在vsc里供你使用。</p>
<p>Cursor在我眼中相比于其他IDE最大的优势是：</p>
<ul>
<li>新用户试用期内免费使用绝大多数模型（Claude4的用不了）</li>
<li>提供贼多的模型，claude&#x2F;grok&#x2F;gpt&#x2F;gemini…</li>
</ul>
<p>其他的也就不多赘述了，感兴趣的可以去搜一下相关的介绍。</p>
<p>如果 在试用期内把免费次数用完了&#x2F;试用期结束了 怎么办呢？那就换一个号继续薅！</p>
<p>接下来就开始我们的薅羊毛无限续杯教学~</p>
<h2 id="无限邮箱"><a href="#无限邮箱" class="headerlink" title="无限邮箱"></a>无限邮箱</h2><p>首先，Cursor的账户 <strong>仅需邮箱即可注册</strong>，这就让我们有了可乘之机：<strong>可以找一家无限邮箱来无限地注册Cursor账号</strong><br>那又要怎么选呢？<br>通常来说，有两种办法：<strong>自建</strong> 和 <strong>用现成的</strong><br>我用的是自建的 <a class="link"   href="https://github.com/beilunyang/moemail" >Moemail<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，若是嫌麻烦则可以用作者现成的邮箱服务：<a class="link"   href="https://moemail.app/" >https://moemail.app/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>当然你要使用其他的服务也可以，这里推荐一个：<a class="link"   href="https://mail.uu.me/" >Uumail<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>生成了你的小号邮箱后，就可以进入下一步了。</p>
<h2 id="Cursor-相关"><a href="#Cursor-相关" class="headerlink" title="Cursor 相关"></a>Cursor 相关</h2><p>先是安装Cursor。</p>
<p>Cursor不要安装最新版本，建议安装较老的 <code>0.46.x</code> 版本，我用的是 0.46.11</p>
<blockquote>
<p>用最新版会被Cursor各种ban号<br>下载地址：<a class="link"   href="https://cn.cursorhistory.com/versions/0.46.11" >https://cn.cursorhistory.com/versions/0.46.11<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>然后是关闭Cursor的自动更新</p>
<ol>
<li><p>下载完安装包后 <strong>断开网络连接</strong></p>
</li>
<li><p>安装Cursor</p>
</li>
<li><p>打开Cursor，设置中搜索<code>update</code>，将<code>Application/Update</code>下的自动更新模式设置为<code>none</code><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/cursor.png"
                      alt="1"
                ></p>
</li>
<li><p>关闭Cursor</p>
</li>
<li><p>禁用自动更新</p>
<details class="blue" data-header-exclude>
    <summary><i class="fa-solid fa-chevron-right"></i>Windows </summary>
    <div class='content'>
      <ul><li>进入 <code>%USERPROFILE%\AppData\Local\Programs\cursor\resources</code> 【Win+R输入即可】</li><li>将<code>app-update.yml</code>重命名为<code>app-update.yml.bak</code></li><li>新建空白文件<code>app-update.yml</code>，并为文件设置只读属性</li></ul>
    </div>
  </details>
</li>
<li><p><strong>重新连接网络</strong>，验证更新是否成功禁用。<br>打开Cursor，打开命令面板，输入<code>&gt; Attempt Update</code>执行。如果没有任何反应，说明禁用成功。</p>
</li>
</ol>
<p>然后你就可以开始自由使用Cursor啦~</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol>
<li>在更换Cursor账号时（退出原号时）记得要断网再点 Logout</li>
<li>退出原号后，建议先重启电脑，随后使用<strong>脚本</strong>清除Cursor的注册表登录相关信息再登录新的账号<details class="blue" data-header-exclude>
    <summary><i class="fa-solid fa-chevron-right"></i>脚本 </summary>
    <div class='content'>
      <p>管理员模式启动Powershell 输入</p><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">irm https://raw.githubusercontent.com/yuaotian/go-cursor-help/refs/heads/master/scripts/run/cursor_win_id_modifier.ps1 | iex</span><br></pre></td></tr></table></figure></div><p>回车即可。</p>
    </div>
  </details></li>
<li>一些其他的使用中出现的问题可以看<a class="link"   href="https://pdfjs.qiusyan.top/web/viewer.html?file=https://static1.keepcdn.com/user-avatar/2025/07/06/10/67dec4444178fb0001f541ac/ciallo/33f83474bcfebe8dde2fd2413e7263dc_Cursor%E9%87%8C%E5%87%BA%E7%8E%B0%E7%9A%84%E6%8F%90%E7%A4%BA%E8%A7%A3%E5%86%B3.pdf" >这个PDF文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a class="link"   href="https://blog.keke.cc/tech/software/disable-cursor-auto-update" >禁用Cursor自动更新 · 科科Cole<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://linux.do/t/topic/679738" >cursor出现Your request has been blocked 怎样处理？ - 开发调优 - LINUX DO<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Cursor</tag>
        <tag>白嫖</tag>
        <tag>自建</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2023</title>
    <url>/posts/10055.html</url>
    <content><![CDATA[<p>时间过的好快啊。不知不觉间一年又过去了。<br>这篇年度总结我本来都不准备写了（鸽子精附体<br>但是想来想去还是写一篇记录一下吧 毕竟我博客复活总不能还是挂着那几篇老文章 也不好看是不是（<br>于是到今天才写了这篇2023年度总结（咕咕咕<br>各位将就看看吧 我太久没写东西了基本语言逻辑 表述方面啥的可能都有点问题 就这样</p>
<!-- more -->





<p><meting-js server="netease" type="song" id="1959667347"></meting-js></p>
<h2 id="中考"><a href="#中考" class="headerlink" title="中考"></a>中考</h2><p>2023年对我来说其中的一件大事是中考。<br>中考嘛，人生中第二道分水岭嘛 <span class="heimu" title="可恶！居然被你发现了！￣へ￣">第一道是投胎（不是</span><br>我表现的还行吧，850的总分也考了722.4<br>这个分数主要是啃老本（捂脸）<br>因为3月份的时候查出来病复发了（具体可以看之前的博文<span class="heimu" title="可恶！居然被你发现了！￣へ￣">悲观日常</span> ）<br>但是由于各种现实原因我又不能在23届休学 所以就只能边治病边上学（瘫）<br>2月份复学之后我差不多安安稳稳的上了一个月的课 （这部分课还是我已经学过了的（！<br>然后就是长沙娄底不停往返 害<br>治疗的话一个疗程要连续打一个星期的药 21天去一次 所以说在回来之后我只有2周时间就又得去医院了（悲）我根本没多少时间上课（瘫）<br>而且更不知道怎么说的是<br>我在医院的时候 他们在复习<br>我在学校的时候 他们在考试<br>我：？<br>我：啊？</p>
<p>所幸我之前的基础还不错 啃老本也没有落下太多 一二模之类考的不能说很好 只能说一般吧<br>如果我认认真真上课的话 班一名一定是我的！（蜜汁自信hhh）</p>
<p>然后中考的话 怎么说呢 考的还是差了点意思 但是对于当时的我来说还算超常发挥了嘿嘿（当时以为只能考690+<br>如果没生病的话我努努力是能上800的</p>
<p>所以说咱现在也是有初中毕业证的人啦！虽说身体原因 只能又休学一年 害 <span class="heimu" title="可恶！居然被你发现了！￣へ￣">（所以才说是准高一生</span> </p>
<p>再说说今年复学的这个班级吧<br>很幸运我能遇到这么一群可爱的同学 虽然说在一起的时间比较短但是还是有几个玩的很好的朋友的！<br>现在虽然毕业了 分开了 但是咱几个都还是在群里聊天吹水 有空一起玩玩游戏啥的 挺好的</p>
<h2 id="治疗"><a href="#治疗" class="headerlink" title="治疗"></a>治疗</h2><p>中考后大概是8月初吧，我到长沙湘雅附二内科楼三楼层流病房<span class="heimu" title="可恶！居然被你发现了！￣へ￣"><del class="mask">报菜名既视感</del></span> 做了异基因移植<br>用的我哥的造血干细胞。移植过程中一切顺利，但后面排异的话就有点严重了（悲）<br>好难受的说。。。<br>皮排，肠排，眼排轮番上阵，人都麻了<br>当时搞了好久，住了50多天院才出来<br>结果出院不到两个星期 我又因为肝转氨酶飙升住院治疗（瘫）<br>只能说，不堪回首（捂脸）<br>现在还好，已经基本上好了<br>然后就是慢慢休养 慢慢康复</p>
<h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><p>今年由于边上学边治疗 时间宽松了些<br>我尝试了许多新东西！<br>看了挺多小说 游戏也玩了些 同时也折腾了蛮多新东西<br>挺惬意的</p>
<p>小说的话看了</p>
<ul>
<li><strong>《异常生物见闻录》《黎明之剑》</strong> 两本都是佳作</li>
<li><strong>《我在精神病院学斩神》《开局摆摊卖大力》《我一个史莱姆吊打巨龙很合理吧？》</strong> 这几本番茄神作（？ 反正我看得挺开心的</li>
<li><strong>《诡秘之主》</strong> <span class="heimu" title="可恶！居然被你发现了！￣へ￣">赞美愚者！</span></li>
<li><strong>《我的治愈系游戏》《我有一座恐怖屋》</strong> <span class="heimu" title="可恶！居然被你发现了！￣へ￣">好看好看，快去看</span> </li>
<li><strong>《最强反套路系统》《我修的可能是假仙》《亏成首富从游戏开始》《成为圣人是一种什么体验？》《仙王的日常生活》《这游戏也太真实了》</strong><span class="heimu" title="可恶！居然被你发现了！￣へ￣">都不知道是几刷了</span></li>
</ul>
<p>入坑了 <strong>《原神》《崩坏：星穹铁道》《重返未来：1999》</strong> 都挺不错的</p>
<p>23年折腾的东西就多了</p>
<ul>
<li>整了个 QQBot <strong>望舒</strong> 用的是Mirai+大佬写的插件拼拼凑凑整的</li>
<li>搭了<strong>论坛、Minecraft皮肤站、搜索引擎、免翻ChatGPT、免翻NewBing、静态博客、RSSHub、第三方网易云音乐</strong> <span class="heimu" title="可恶！居然被你发现了！￣へ￣">虽说搭了这么多但是还活着的没剩几个了（</span> </li>
<li>复活了 Minecraft服务器 <strong>昕夕亭</strong></li>
</ul>
<p>然后。。。就没有然后了，这篇年度总结也到了最后了 <span class="heimu" title="可恶！居然被你发现了！￣へ￣">想氵也氵不出来了</span><br>那就<br>希望我2024能越来越好！<br>希望愿望都能实现！<br>加油！</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2024</title>
    <url>/posts/32382.html</url>
    <content><![CDATA[<p><meting-js api="https://api.i-meto.com/meting/api?server=tencent&type=song&id=004S5Lij3dbsNJ"></meting-js></p>
<p>时间感觉过的好快啊，又是碌碌无为的一年。</p>
<h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>在家里面待了一年，啥也没做，啥也没学，感觉整个人都退化了<br>本来说今年9月去上学的，但是医生说因为我还在吃那些抗排异药，也就是免疫抑制剂，抵抗力很差，所以还是让我休学一年。</p>
<p>唉，我能说什么呢。<br>只能叹命运不公吧。</p>
<p>真的很想去上学啊。<br>已经不知道做了多少次和他们一起学习的梦了，每次醒来都是怅然若失。</p>
<p>今年一整年都没做什么事情，书也没看书，就天天在家玩。<br>我的日常基本上是这样的：<br>早上起来，洗漱吃饭，吃药，启动电脑<br>中午吃饭，午休，吃药，启动电脑<br>晚上吃饭，启动电脑，吃药，洗漱，睡觉</p>
<p>真的就是一天天的啥也没做，要说开电脑是上课我心里倒还好受些，可我是啥都干一点，就是不上课<br>害</p>
<h2 id="娱乐相关"><a href="#娱乐相关" class="headerlink" title="娱乐相关"></a>娱乐相关</h2><p>倒是娱乐方面有点可说的（简称玩了一年）<br>今年绝大部分时间玩的是星铁，甚至他妈的给米哈游爆了6张月卡，我也是神人了<br>其他时间开着mc服务器，一直从年初开到今年8月，后面的时间转公益的简幻欢了<br>我也不知道我开这么久干啥，可能是脑子坏了吧<br>每个月三十块钱呐，唉<br>我也顺便在服务器上搭了望舒，搞到了今年11月<br>因为不想浪费钱了所以就没继续搞了。<br>细想了一下，其实望舒也没人用，白白浪费钱干什么</p>
<p>然后就是年末。<br>前几天，应该是12月23号，我买了份院神玩<br>真的好玩，我买了之后每天都在推这玩意，一周目58h全成就，之后也在小黑盒上面水了几篇帖子，居然也有点人看hhhh</p>
<p>steam年度报告：<a class="link"   href="https://s.team/y24/jbgnjgrh?l=schinese" >QiuSYan的2024年STEAM回顾<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>图片版：<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/steam-replay.png"
                     
                ><br>这个其实不太准，因为我是在统计结束之后才开始疯狂玩院神的，所以院神没在上面<br>如果院神在的话包是年度游戏的hhhh</p>
<p>几个星期之前吧，我突然灵光一现，想了个点子复活了下mc服务器和qq群的消息互通，原理是写一个插件，然后启动gocq的二进制文件，开个正向ws就行了<br>搞好之后还怪有成就感的<br>搞这个的原因是因为我服务器后面扔在简幻欢上面，简幻欢是给你开个docker容器用来开mc</p>
<blockquote>
<p>众所周知，docker里外的网络通信在没有开放端口的情况下会很困难，而简幻欢他只会给你开一个mc的tcp&#x2F;udp端口，mcbot呢又是需要保持websocket链接以传消息的，所以只能在docker内部想办法</p>
</blockquote>
<p>24年的缺憾有点多，比如说没有学很多东西，比如说毛笔字完全不会写了，比如说肺部还是有点问题…<br>唉。<br>希望25年能够越来越好吧。加油。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Pixiv图片代理自建</title>
    <url>/posts/22066.html</url>
    <content><![CDATA[<p>Pixiv的图片反代最近好像寄了，所以决定自己搭一个，记录一下。</p>
<p><meting-js server="netease" id="2029174219" type="song"></meting-js></p>
<h2 id="使用-CloudFlare-Workers-搭建"><a href="#使用-CloudFlare-Workers-搭建" class="headerlink" title="使用 CloudFlare Workers 搭建"></a>使用 CloudFlare Workers 搭建</h2><p>去Cloudflare创建一个Worker，然后将代码替换为如下：</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params">request</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">    url.<span class="property">hostname</span> = <span class="string">&#x27;i.pximg.net&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxyRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(url, request);</span><br><span class="line">    proxyRequest.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&#x27;Referer&#x27;</span>, <span class="string">&#x27;https://www.pixiv.net/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(proxyRequest);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>



<h2 id="使用Vercel加速"><a href="#使用Vercel加速" class="headerlink" title="使用Vercel加速"></a>使用Vercel加速</h2><p>在Github创建一个仓库，名称随意，在里面新建一个文件 <code>vercel.json</code>，内容如下：</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span><span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/(.*)&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&#123;DOMAIN&#125;&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>记得将代码中的 {DOMAIN} 部分替换为你自己的域名或者默认域名</p>

  </div>

<blockquote>
<p>默认域名查看位置：打开你的 Worker 界面，转到 <strong>设置</strong> – <strong>触发器</strong> – <strong>路由</strong><br>自定义域名在同页面的 <strong>自定义域</strong> 处添加。</p>
</blockquote>
<p>随后打开 <a class="link"   href="https://vercel.com/dashboard" >Vercel<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> ，选择新建项目，再选择你刚刚创建的仓库，部署即可。<br>然后转至 <strong>Settings</strong> – <strong>Domains</strong>，添加你的自定义域名。然后你的Pixiv图片代理就搭建完成了。</p>
<h2 id="这玩意有什么用"><a href="#这玩意有什么用" class="headerlink" title="这玩意有什么用"></a>这玩意有什么用</h2><p>Pixiv 在大陆被墙，并且图片服务器域名 i.pximg.net 有盗链保护，只要 Referer 不是来自 Pixiv 的请求都会返回 403。<br>而我们可以通过自建图片反代来获取Pixiv的图片。<br>例如，这是一张 <strong>维尔汀</strong> 的 Pixiv 作品，Pixiv页面链接是 <a class="link"   href="https://www.pixiv.net/artworks/115663906" >https://www.pixiv.net/artworks/115663906<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>图片链接是 <a class="link"   href="https://i.pximg.net/img-master/img/2024/02/01/12/59/30/115663906_p0_master1200.jpg" >https://i.pximg.net/img-master/img/2024/02/01/12/59/30/115663906_p0_master1200.jpg<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>（你们可以打开图片链接看看能否访问<br>搭建好图片反代后，链接可以写为这样以获取图片：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://你的反代域名/img-master/img/2024/02/01/12/59/30/115663906_p0_master1200.jpg</span><br></pre></td></tr></table></figure></div>
<p>例如我的就是</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://pximg.qiusyan.us.kg/img-master/img/2024/02/01/12/59/30/115663906_p0_master1200.jpg</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pximg.qiusyan.us.kg/img-master/img/2024/02/01/12/59/30/115663906_p0_master1200.jpg"
                      alt="我是维尔汀的狗！！！"
                ></p>
<p>又比如，如果你正在使用 <a class="link"   href="https://github.com/Notsfsssf/pixez-flutter" >PixEz<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，那么你可以在 <strong>偏好设置</strong> 中将图片域名更换为你的<br>这样就能使图片正常加载了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a class="link"   href="https://blog.yuki.sh/posts/599ec3ed8eda/" >Pixiv 图片反向代理 - Yuki 妙妙屋<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Pixiv</tag>
        <tag>CloudFlare Workers</tag>
        <tag>Vercel</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyinstaller打包py文件为exe</title>
    <url>/posts/35344.html</url>
    <content><![CDATA[<p><meting-js server="netease" type="song" id="31445554"></meting-js></p>
<p>昨天在Claude的帮助下写了个 <strong>星穹铁道模拟抽卡</strong> ，用python写的。<br><strong>Github: <a class="link"   href="https://github.com/qiusyan-projects/SR-Gacha" >qiusyan-projects&#x2F;SR-Gacha: 星穹铁道抽卡模拟器<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong><br>为了方便没装python的朋友也能快速玩上，我去了解了一下py文件打包为exe的方法<br>目前来说，比较常见的打包exe方法都是通过 <strong>Pyinstaller</strong> 来实现的<br><span class="heimu" title="嘿嘿"><del class="mask">又水一篇</del></span></p>
<h2 id="什么是Pyinstaller"><a href="#什么是Pyinstaller" class="headerlink" title="什么是Pyinstaller"></a>什么是Pyinstaller</h2><blockquote>
<p>PyInstaller是一个开源的Python程序打包工具，它可以用来将Python应用程序打包成独立的执行文件，这样在没有安装Python解释器的计算机上也可以运行这些程序。PyInstaller支持多种操作系统，包括Windows、Linux和macOS。<br>以下是PyInstaller的一些主要特点：</p>
<ul>
<li>单文件打包：可以将Python应用程序及其所有依赖打包成一个单一的执行文件。</li>
<li>跨平台：能够在不同的操作系统上打包和分发应用程序。</li>
<li>无安装运行：打包后的应用程序可以在没有安装Python的环境中直接运行。</li>
<li>依赖打包：自动搜索并打包应用程序所依赖的库。</li>
<li>可定制性：允许用户指定打包的选项，如图标、版本信息等。</li>
</ul>
<p>使用PyInstaller的步骤通常包括：</p>
<ul>
<li>安装PyInstaller。</li>
<li>运行PyInstaller并指定要打包的Python脚本。</li>
<li>根据需要选择生成单文件或多文件分发。</li>
<li>在生成的dist文件夹中找到打包后的应用程序。<br>PyInstaller是一个强大的工具，对于希望分发Python应用程序的开发者来说非常有用。</li>
</ul>
</blockquote>
<p>以上内容来自 <strong>ChatGLM</strong></p>
<h2 id="环境相关"><a href="#环境相关" class="headerlink" title="环境相关"></a>环境相关</h2>
  <div class="note p-4 mb-4 rounded-small info modern">
    <p>For Windows</p>

  </div>

<p>首先需要安装Python（废话<br>然后换源</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>
<p>将pip源更换为 <strong>清华源</strong><br>在你想要打包的文件夹里面打开命令行，使用 <code>python -m venv .venv</code> 创建一个虚拟环境</p>
<blockquote>
<p>如果不这样的话，pyinstaller就会直接把你你系统中安装的所有的Python包都打包进去<br>你也不想一个几k的脚本打包完之后变成几百M了吧 .jpg</p>
</blockquote>
<p>使用 <code>.venv\Scripts\activate</code> 激活虚拟环境。如果一切正常的话，你应该会看到如下的输出：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/py2exe.png"
                      alt="前面有个绿色的括号"
                ><br>恭喜你，现在已经成功进入了虚拟环境。</p>
<p>在虚拟环境中使用pip安装 <code>pyinstaller</code>：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure></div>

<p>然后在虚拟环境中尝试运行你的脚本，如果能够成功运行，那就不要安装额外的库<br>如果显示缺失哪些库，那就手动安装一下</p>
<h2 id="开始打包"><a href="#开始打包" class="headerlink" title="开始打包"></a>开始打包</h2><p>在虚拟环境中切换到你想打包的文件所在的目录，然后使用</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pyinstaller -F your-file.py</span><br></pre></td></tr></table></figure></div>
<p>指令，打包。</p>
<p>如果想要添加图标，那就在同级目录下放一个ico文件，然后使用</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">pyinstaller -F your-file.py -i icon.ico</span><br></pre></td></tr></table></figure></div>
<p>即可。</p>
<p>如果你不想让程序启动时打开命令行，那就在-F后面带一个 <code>-w</code> 参数就行了</p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>来看看咱的抽卡模拟器呗（<br><a href="https://github.com/qiusyan-projects/SR-Gacha"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://socialify.git.ci/qiusyan-projects/SR-Gacha/image?description=1&font=Jost&forks=1&issues=1&language=1&logo=https://avatars.githubusercontent.com/u/175322378?v=4&name=1&owner=1&pattern=Circuit%20Board&pulls=1&stargazers=1&theme=Auto"
                      alt="SR-Gacha"
                ></a><br>如果有Star那就再好不过了（搓手<br>嘿嘿</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>高版本Python在低glibc版本下的使用方法</title>
    <url>/posts/23909.html</url>
    <content><![CDATA[<p>写这篇文章是因为前段时间想在某平台上的Java环境中使用Python，当时搞了半天才搞好，特此记录以免将来忘记。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某Minecraft服务器平台提供了两种环境：<code>Python</code> 和 <code>Java</code>。一开始我是拿来搭建我的Minecraft服务器，因此选的是 Java 环境。<br>前段时间我寻思着，既然我都已经把QQbot后端，也就是 <code>gocq</code> 给扔到服务器上面了，那我能不能一起复活一下我的Nonebot机器人呢？<br>说干就干。<code>Nonebot</code> 是由Python写的，且仅支持 <code>Python 3.9</code> 及以上版本，我直接就在我虚拟机上用 Python3.10 创了个虚拟环境扔了上去。<br>结果在使用Python时报错：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/container/plugins/nb/.venv/bin/python3.10: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.35&#x27; not found (required by /home/container/plugins/nb/.venv/bin/python3.10)</span><br><span class="line">/home/container/plugins/nb/.venv/bin/python3.10: /lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29&#x27; not found (required by /home/container/plugins/nb/.venv/bin/python3.10)</span><br><span class="line">/home/container/plugins/nb/.venv/bin/python3.10: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.33&#x27; not found (required by /home/container/plugins/nb/.venv/bin/python3.10)</span><br><span class="line">/home/container/plugins/nb/.venv/bin/python3.10: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.32&#x27; not found (required by /home/container/plugins/nb/.venv/bin/python3.10)</span><br><span class="line">/home/container/plugins/nb/.venv/bin/python3.10: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.34&#x27; not found (required by /home/container/plugins/nb/.venv/bin/python3.10)</span><br></pre></td></tr></table></figure></div>
<p>寄。glibc版本低了。<br>然后一看平台给的容器镜像是 <code>Debian 6</code>，glibc版本是2.28，也升不了glibc，那就只能启动 <strong>编译大法</strong> 了！</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>一台可联网的Linux机器 （没有的可以整个虚拟机 我用的是 <code>Ubuntu 22.04</code>） </li>
<li>较好的耐心</li>
<li>自行使用搜索引擎的能力</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2>
  <div class="note p-4 mb-4 rounded-small info">
    <p><a href="#%E5%BC%80%E5%A7%8B">第三节</a>和<a href="#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">第四节</a>的所有操作均在 <code>Docker</code> 容器内进行 </p>

  </div>



<p>先使用脚本一键安装 Docker：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)</span><br></pre></td></tr></table></figure></div>

<p>此脚本会自动更换docker源，按照脚本指引安装即可。</p>
<p>然后启动一个相同glibc版本的docker镜像。由于平台上面的是glibc 2.28，我这里就选用 Ubuntu 18.04 （glibc版本2.28） 来构建：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --name pybuild ubuntu:18.04</span><br></pre></td></tr></table></figure></div>

<p>下载完镜像后会自动进入容器中。随后换源与下载必要的构建工具：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 换源</span></span><br><span class="line">sed -i <span class="string">&#x27;s@//.*archive.ubuntu.com@//mirrors.tuna.tsinghua.edu.cn@g&#x27;</span> /etc/apt/sources.list</span><br><span class="line">sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新与安装</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install -y build-essential zlib1g-dev libssl-dev libffi-dev libbz2-dev libsqlite3-dev libreadline-dev liblzma-dev tk-dev patchelf rsync</span><br></pre></td></tr></table></figure></div>

<p>然后下载Python3.10的源码：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">wget https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tgz</span><br><span class="line">tar -xzf Python-3.10.13.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.10.13</span><br></pre></td></tr></table></figure></div>

<p>配置编译参数：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">./configure \</span><br><span class="line">  --prefix=/opt/python-3.10-static \</span><br><span class="line">  --enable-optimizations \</span><br><span class="line">  --with-lto \</span><br><span class="line">  --with-system-ffi=no \</span><br><span class="line">  --enable-shared  </span><br></pre></td></tr></table></figure></div>

<p>仅编译不安装：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure></div>

<p>手动生成缺失的模块：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入构建目录</span></span><br><span class="line"><span class="built_in">cd</span> build/lib.linux-x86_64-3.10</span><br><span class="line"><span class="comment"># 手动生成缺失的模块</span></span><br><span class="line">./python3.10 -c <span class="string">&quot;import _posixsubprocess&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>跳过ensurepip安装（后续手动安装pip）：</p>
<blockquote>
<p>之前直接安装过出错了，不知道为什么，只能先跳过了</p>
</blockquote>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">make install ENSUREPIP=no</span><br></pre></td></tr></table></figure></div>

<p>make 完成后手动安装pip：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载get-pip.py</span></span><br><span class="line">curl -O https://bootstrap.pypa.io/get-pip.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用编译的Python安装pip</span></span><br><span class="line">/opt/python-3.10-static/bin/python3.10 get-pip.py</span><br></pre></td></tr></table></figure></div>

<p>现在你的可用于低glibc版本的Python3.10就编译好了，路径位于 <code>Docker</code> 容器中的 <code>/opt/python-3.10-static</code>。不过如果需要正常使用的话，还需要加一条PATH：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/opt/python-3.10-static/lib:<span class="variable">$LD_LIBRARY_PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>这样才能正常使用 <del class="mask">不要问我为什么要手动指定路径因为我也不知道</del> 。<br>用例：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/python-3.10-static/bin/python --version</span><br></pre></td></tr></table></figure></div>

<h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>现在，Python本体已经编译好了，但是为了便捷性与不必要的麻烦，通常是 将虚拟环境迁移到其他机器 而非本体。</p>
<blockquote>
<p>以 <code>/opt/python-3.10-static/bin</code> 为 Python目录</p>
</blockquote>
<p>先创建一个虚拟环境：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">/opt/python-3.10-static/bin/python3.10 -m venv --copies /opt/myenv</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用 <code>--copies</code> 参数来复制二进制文件</p>
</blockquote>
<p>再复制一些必要动态库到虚拟环境：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/lib/x86_64-linux-gnu/libssl.so.1.1 /opt/myenv/lib/</span><br><span class="line"><span class="built_in">cp</span> /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 /opt/myenv/lib/</span><br><span class="line"><span class="built_in">cp</span> /opt/python-3.10-static/lib/libpython3.10.so.1.0 /opt/myenv/lib</span><br></pre></td></tr></table></figure></div>

<p>随后使用 patchelf 修改Python解释器和库的链接路径：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">patchelf --set-rpath <span class="string">&#x27;$ORIGIN/../lib&#x27;</span> /opt/myenv/bin/python3.10</span><br><span class="line">patchelf --set-rpath <span class="string">&#x27;$ORIGIN&#x27;</span> /opt/myenv/lib/libssl.so.1.1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>关于 <code>patchelf</code> 有个需要注意的地方：<br>前面使用了apt直接安装了较低版本的 <code>patchelf</code>，这个低版本的使用指令会报错，所以需要安装 <code>Github</code> 上的最新版本。</p>
<ol>
<li>克隆仓库：<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/NixOS/patchelf.git</span><br></pre></td></tr></table></figure></div></li>
<li>进入目录，运行脚本以生成构建所需的文件：<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> patchelf</span><br><span class="line">./bootstrap.sh</span><br></pre></td></tr></table></figure></div></li>
<li>运行 configure 脚本来配置构建环境：<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></div></li>
<li>使用 <code>make</code> 编译 &#x2F; 测试 &#x2F; 安装<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译项目</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试项目</span></span><br><span class="line">make check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 patchelf</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div></li>
</ol>
</blockquote>
<p>然后就是跟之前一样的加一条PATH：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/opt/myenv/lib:<span class="variable">$LD_LIBRARY_PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>由于这将是单独的Py虚拟环境，而其内置的标准库（如 <code>encodings</code> 等）未在虚拟环境中，如果直接运行它的py和pip会报错，所以需要手动复制。</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制库到虚拟环境</span></span><br><span class="line">rsync -av --exclude=<span class="string">&#x27;site-packages/&#x27;</span> /opt/python-3.10-static/lib/python3.10/ /opt/myenv/lib/python3.10/</span><br></pre></td></tr></table></figure></div>

<p>最后用 <code>7z</code> 或 <code>zip</code> 将 <code>myenv</code> 目录压缩，用 <code>docker cp</code> 复制到宿主机后 扔到目标机器上即可。</p>
<p>好了，目前为止准备工作算是做完了。之后是将其转移到目标机器上后的步骤了。</p>
<h2 id="目标机器"><a href="#目标机器" class="headerlink" title="目标机器"></a>目标机器</h2><p>转移到目标机器上后，并不能马上使用，还要经过最后一道程序才能正常使用python和pip：<br>需要更改 <code>myenv</code> 中 <code>pip</code> 和 <code>pyvenv.cfg</code> 中 <strong>python二进制文件的路径</strong>。</p>
<p>比如说，我原本的 python主体路径 为 <code>/opt/python-3.10-static</code><br>目标机器上的虚拟环境路径为 <code>/home/container/myenv</code><br>则使用指令一键替换：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 替换pyvenv.cfg</span></span><br><span class="line"><span class="built_in">cd</span> /home/container/myenv</span><br><span class="line">sed -i <span class="string">&quot;s|/opt/python-3.10-static|/home/container/myenv|g&quot;</span> pyvenv.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换pip</span></span><br><span class="line"><span class="built_in">cd</span> /home/container/myenv/bin</span><br><span class="line">sed -i <span class="string">&quot;s|/opt/python-3.10-static|/home/container/myenv|g&quot;</span> pip pip3 pip3.10</span><br></pre></td></tr></table></figure></div>

<p>别忘了加PATH：</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="string">&quot;/home/container/myenv/lib:<span class="variable">$LD_LIBRARY_PATH</span>&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>之后使用的时候直接用 <code>/home/container/myenv/bin/python</code> 即可。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>为Hexo-Redefine主题启用MetingJs</title>
    <url>/posts/21658.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small green icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p>本教程适配 Redefine <code>v2.8.2</code> </p>

  </div>

<p>最近把Hexo的主题切换到了<a class="link"   href="https://github.com/evannotfound/hexo-theme-redefine" >Redefine<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，用着还不错<br>看文档说支持Aplayer播放器，但是不支持MetingJs，只能自己添加音频直链，挺麻烦的（而且也不支持页面内嵌Aplayer播放器）<br>于是我就花了点时间捣鼓了一下，实现效果还不错，但是移动端好像无法正常显示🤔<br>不知道咋回事，先将就用着吧，看有没有大佬能够完善一下或者看作者会不会加到主题里面了＞︿＜</p>
<h3 id="引入JS文件"><a href="#引入JS文件" class="headerlink" title="引入JS文件"></a>引入JS文件</h3><p>第一步当然是引入相关的js文件了，我的选择是把文件保存本地然后在主题里面以相对路径引用。<br>由于Aplayer.min.js主题里面已经有了，所以我们只需要把Meting.min.js下载下来就行了。</p>
<blockquote>
<p>Meting.min.js: <a class="link"   href="https://fastly.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js" >Meting.min.js<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>随后将Meting.min.js移至 <code>theme/redefine/source/js/build/libs</code> 即可。</p>
<p>然后新建一个文件，路径为  <strong><code>theme/redefine/layout/components/plugins/meting_js_only.ejs</code></strong> ，内容为</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- renderJS(&#x27;libs/APlayer.min.js&#x27;) %&gt;</span><br><span class="line">&lt;%- renderJS(&#x27;libs/Meting.min.js&#x27;) %&gt;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>起这个名字的原因是 我仅想引入Aplayer和Meting的js文件而不直接创建一个Aplayer的容器，因为我不想搞那个全局吸底，我想弄的是页面内嵌播放器<br>页面内嵌播放器的格式跟全局吸底的不同</p>
</blockquote>
<p>然后在同级目录里面创建一个名为 <code>meting.ejs</code> 的文件（路径： <strong><code>theme/redefine/layout/components/plugins/meting.ejs</code></strong> ），内容为：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;meting-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;%- renderJS(&#x27;plugins/meting.js&#x27;) %&gt;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>既然有纯js版的也就有创建容器版的，但是这个就只是创建容器而没有引入js了</p>
</blockquote>
<h3 id="Meting-js之构建全局播放器"><a href="#Meting-js之构建全局播放器" class="headerlink" title="Meting.js之构建全局播放器"></a>Meting.js之构建全局播放器</h3><p>欸，上面说不是有引入 <code>js/plugins/meting.js</code>吗？那文件呢？<br>你先别急，这不就来了吗<br>这个文件是用于 <strong>读取配置文件中的参数来构建一个全局吸底的播放器</strong></p>

  <div class="note p-4 mb-4 rounded-small green icon-padding">
    <i class="note-icon fa-solid fa-circle-info"></i><p>此文件路径 <strong><code>themes/redefine/source/build/js/plugins/meting.js</code></strong></p>

  </div>

<p><code>meting.js</code>内容：</p>
<div class="code-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从主题配置中获取 meting 配置</span></span><br><span class="line"><span class="keyword">const</span> metingConfig = theme.<span class="property">plugins</span>.<span class="property">meting</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Meting Config:&#x27;</span>, metingConfig);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化播放器配置的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initMetingPlayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 检查必选参数</span></span><br><span class="line">    <span class="keyword">if</span> (!metingConfig.<span class="property">id</span> || !metingConfig.<span class="property">server</span> || !metingConfig.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Missing required parameters:&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">id</span>: metingConfig.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">server</span>: metingConfig.<span class="property">server</span>,</span><br><span class="line">            <span class="attr">type</span>: metingConfig.<span class="property">type</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 meting-js 元素</span></span><br><span class="line">    <span class="keyword">const</span> metingElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;meting-js&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置必选属性</span></span><br><span class="line">    metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;server&#x27;</span>, metingConfig.<span class="property">server</span>);</span><br><span class="line">    metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, metingConfig.<span class="property">type</span>);</span><br><span class="line">    metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;id&#x27;</span>, metingConfig.<span class="property">id</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据播放器类型设置 fixed 或 mini</span></span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">playerType</span> === <span class="string">&#x27;fixed&#x27;</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;fixed&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (metingConfig.<span class="property">playerType</span> === <span class="string">&#x27;mini&#x27;</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;mini&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置其他可选属性</span></span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">autoplay</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;autoplay&#x27;</span>, metingConfig.<span class="property">autoplay</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">theme</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;theme&#x27;</span>, metingConfig.<span class="property">theme</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">loop</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;loop&#x27;</span>, metingConfig.<span class="property">loop</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">order</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;order&#x27;</span>, metingConfig.<span class="property">order</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">preload</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;preload&#x27;</span>, metingConfig.<span class="property">preload</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">volume</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;volume&#x27;</span>, metingConfig.<span class="property">volume</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">mutex</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;mutex&#x27;</span>, metingConfig.<span class="property">mutex</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">lrcType</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lrc-type&#x27;</span>, metingConfig.<span class="property">lrcType</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">listFolded</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;list-folded&#x27;</span>, metingConfig.<span class="property">listFolded</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">listMaxHeight</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;list-max-height&#x27;</span>, metingConfig.<span class="property">listMaxHeight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (metingConfig.<span class="property">storageName</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        metingElement.<span class="title function_">setAttribute</span>(<span class="string">&#x27;storage-name&#x27;</span>, metingConfig.<span class="property">storageName</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取并清空 meting-container 容器</span></span><br><span class="line">    <span class="keyword">const</span> apContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;meting-container&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (apContainer) &#123;</span><br><span class="line">        apContainer.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 将 meting-js 元素添加到容器中</span></span><br><span class="line">        apContainer.<span class="title function_">appendChild</span>(metingElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Created meting element:&#x27;</span>, metingElement.<span class="property">outerHTML</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保 DOM 加载完成后再执行初始化</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&#x27;loading&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, initMetingPlayer);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">initMetingPlayer</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="注入主题文件"><a href="#注入主题文件" class="headerlink" title="注入主题文件"></a>注入主题文件</h3><p>万事俱备，只欠东风。<br>现在我们只需要把这些组件给注入到主题文件里面就行了。<br>编辑布局文件 <code>theme/redefine/layout/layout.ejs</code><br>将其修改为：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&lt;%= config.language %&gt;&quot;&gt;</span><br><span class="line">&lt;%- partial(&#x27;components/header/head&#x27;) %&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;%- body %&gt;</span><br><span class="line">	&lt;%- partial(&#x27;components/scripts&#x27;) %&gt;</span><br><span class="line">	&lt;% if (theme.plugins.aplayer.enable) &#123; %&gt;</span><br><span class="line">	&lt;%- partial(&#x27;components/plugins/aplayer&#x27;) %&gt;</span><br><span class="line">	&lt;% &#125; %&gt;</span><br><span class="line">	&lt;% if (theme.plugins.meting.enable) &#123; %&gt;</span><br><span class="line">		&lt;%- partial(&#x27;components/plugins/meting_js_only&#x27;) %&gt;</span><br><span class="line">	&lt;% &#125; %&gt;</span><br><span class="line">	&lt;% if (theme.plugins.meting.global_sticky_enable) &#123; %&gt;</span><br><span class="line">		&lt;%- partial(&#x27;components/plugins/meting&#x27;) %&gt;</span><br><span class="line">	&lt;% &#125; %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<p>即可。</p>
<p>你可能会发现，在布局文件中有几个开关来控制是否引入这些文件，那么我们现在添加。<br>在 <code>config.redefine.yml</code> 添加一个配置项：（在<code>plugins</code>下，其实紧挨着 <code>aplayer</code> 配置项就行了，注意缩进）</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">meting:</span> <span class="comment"># MetingJs相关配置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否全局注入Aplayer.js与Meting.js</span></span><br><span class="line">  <span class="attr">global_sticky_enable:</span> <span class="literal">false</span> <span class="comment"># 是否启用全局吸底，不启用的话下面的配置项无效</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">&#x27;1926144232&#x27;</span> <span class="comment"># 歌曲ID / 歌单ID / 专辑ID</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">&#x27;netease&#x27;</span> <span class="comment"># 音乐平台</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;song&#x27;</span> <span class="comment"># ID对应的类型</span></span><br><span class="line">  <span class="attr">playerType:</span> <span class="string">&#x27;fixed&#x27;</span> <span class="comment"># 吸底 / 迷你 | fixed &amp; mini </span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">&#x27;auto&#x27;</span> </span><br><span class="line">  <span class="attr">loop:</span> <span class="string">&#x27;all&#x27;</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;#4586F3&#x27;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>更多配置项可前往 Github 查看：<a class="link"   href="https://github.com/metowolf/MetingJS?tab=readme-ov-file#option" >Option<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>OK，大功告成。你现在可以使用 <code>hexo s</code> 预览你的播放器效果了。</p>
<h3 id="我只是想在页面中插入播放器"><a href="#我只是想在页面中插入播放器" class="headerlink" title="我只是想在页面中插入播放器"></a>我只是想在页面中插入播放器</h3><p>差点忘了这一茬。</p>
<p>如果你只希望在页面中插入播放器的话（而非全局吸底），那么其实可以这样</p>
<ol>
<li>先引入JS文件，将Meting.min.js移至 <code>theme/redefine/source/js/build/libs</code> </li>
<li>编辑布局文件，<code>theme/redefine/layout/layout.ejs</code>，修改为</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&lt;%= config.language %&gt;&quot;&gt;</span><br><span class="line">&lt;%- partial(&#x27;components/header/head&#x27;) %&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%- body %&gt;</span><br><span class="line">&lt;%- partial(&#x27;components/scripts&#x27;) %&gt;</span><br><span class="line">&lt;% if (theme.plugins.meting.enable) &#123; %&gt;</span><br><span class="line">    &lt;%- renderJS(&#x27;libs/APlayer.min.js&#x27;) %&gt;</span><br><span class="line">    &lt;%- renderJS(&#x27;libs/Meting.min.js&#x27;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>此处我把主题原本的 Aplayer 相关给删了，如果有需要可以加回来</p>
</blockquote>
<ol start="3">
<li>在 <code>config.redefine.yml</code> 添加一个配置项：（在<code>plugins</code>下，其实紧挨着 <code>aplayer</code> 配置项就行了，注意缩进）<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">meting:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div></li>
</ol>
<p>插入格式为</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meting-js</span></span></span><br><span class="line"><span class="tag">	<span class="attr">server</span>=<span class="string">&quot;netease&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">type</span>=<span class="string">&quot;song&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">id</span>=<span class="string">&quot;5221167&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">meting-js</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>效果：<br><meting-js server="netease" type="song" id="5221167"><br></meting-js></p>
<p>更多使用方法可前往Github查看：<a class="link"   href="https://github.com/metowolf/MetingJS?tab=readme-ov-file#quick-start" >Quick Start<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>MetingJs</tag>
        <tag>Aplayer</tag>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>星穹铁道二周年快乐！</title>
    <url>/posts/30873.html</url>
    <content><![CDATA[<p>今天是 <code>2025年4月26日</code>，崩坏：星穹铁道迎来了它的两岁生日。<br>说起来我算是个老玩家了，也是一路陪伴走到了今天。</p>
<p>2023.4.26，我在长沙的某个小旅馆登录了游戏，抢了个106开头的uid。<del class="mask">106422231 欢迎来加好友</del><br>当时对这种游戏形式不是很感兴趣且同时间在玩原神，所以刚开服那段时间我没怎么玩，也没有什么抽卡资源，一路跳过了希儿景元银狼三个卡池，直到罗刹卡池才得到了第一个限定五星角色。</p>
<p>再后来，到了七八月份。那时候中考完不久，抽了刃的池子但是歪了克拉拉，这是我第一次歪。<br>后面就到湘雅附二去做移植了。那段时间是真的痛苦，难受得很，只想睡觉，更别说什么游戏了。<br>9月后出院没多久，又排异了，治疗大概花2个月时间，因此再一次退游了。</p>
<p>出院之后开始全勤，截至今天已经连续登录了 <code>402</code> 天，在最近的纪念册活动中也是拿到了第一批。<br>几个月前我搞了个星铁的抽卡模拟器 <del class="mask">还挺好玩 虽然好久没更新卡池了</del> 和一个可以嵌入到WEB页面中的玩家数据卡片。</p>
<blockquote>
<p>抽卡模拟器：<a class="link"   href="https://github.com/qiusyan-projects/SR-Gacha" >SR-Gacha<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>数据卡片生成站：<a class="link"   href="https://sr-card.qiusyan.top/" >SR-Card<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>数据卡片预览：<center><embed src="https://sr-card.qiusyan.top/106422231?theme=auto&logo=13"></center></p>
</blockquote>
<p>星铁是我很喜欢的游戏，它给我在治病养病的这两年的灰暗时光中投下了一丝光亮。<br>从空间站到雅利洛IV，从仙舟到匹诺康尼再到翁法罗斯，原来我们已经走过了这么长一段路途。<br>虽然星铁现在出现了一些问题与不足，但是我相信一切都会好起来的。</p>
<p>祝星铁越来越好！<br>二周年快乐！</p>
<p>愿此行，终抵群星。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>Star Rail</tag>
        <tag>崩坏星穹铁道</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>Win11下WSL2配置记录</title>
    <url>/posts/3676.html</url>
    <content><![CDATA[<p>最近电脑老是无响应，C盘也快满了，就寻思着把系统重装下<br>听说现在Win11更到了23H2了，抱着尝尝鲜的想法，我决定把系统升个级<br>顺便用WSL2装了个Ubuntu，挺舒服的。</p>
<p><meting-js server="netease" type="song" id="2124106667"></meting-js></p>
<h2 id="WSL-是什么"><a href="#WSL-是什么" class="headerlink" title="WSL 是什么"></a>WSL 是什么</h2><p><strong>WSL</strong>，全称 <strong>适用于 Linux 的 Windows 子系统</strong>。</p>
<blockquote>
<p>适用于 Linux 的 Windows 子系统 (WSL) 是 Windows 的一项功能，可用于在 Windows 计算机上运行 Linux 环境，而无需单独的虚拟机或双引导。 WSL 旨在为希望同时使用 Windows 和 Linux 的开发人员提供无缝高效的体验。</p>
<ul>
<li><p>使用 WSL 安装和运行各种 Linux 发行版，例如 Ubuntu、Debian、Kali 等。 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/install" >安装 Linux 发行版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>并从 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/compare-versions#wsl-in-the-microsoft-store" >Microsoft Store<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 接收自动更新、<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/use-custom-distro" >导入 Microsoft Store 中不可用的 Linux 发行版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，或<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/build-custom-distro" >构建你自己的客户 Linux 发行版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
</li>
<li><p>将文件存储在独立的 Linux 文件系统中，具体取决于安装的发行版。</p>
</li>
<li><p>运行命令行工具，例如 BASH。</p>
</li>
<li><p>运行常用的 BASH 命令行工具（例如 <code>grep</code>、<code>sed</code>、<code>awk</code>）或其他 ELF-64 二进制文件。</p>
</li>
<li><p>运行 Bash 脚本和 GNU&#x2F;Linux 命令行应用程序，包括：</p>
<ul>
<li>工具：vim、emacs、tmux</li>
<li>语言：<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/nodejs/setup-on-wsl2" >NodeJS<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>、JavaScript、<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/python/web-frameworks" >Python<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>、Ruby、C&#x2F;C++、C# 和 F#、Rust、Go 等。</li>
<li>服务：SSHD、<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database" >MySQL<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>、Apache、lighttpd、<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database" >MongoDB<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>、<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-database" >PostgreSQL<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</li>
</ul>
</li>
<li><p>使用自己的 GNU&#x2F;Linux 分发包管理器安装其他软件。</p>
</li>
<li><p>使用类似于 Unix 的命令行     调用 Windows 应用程序。</p>
</li>
<li><p>在 Windows 上调用 GNU&#x2F;Linux 应用程序。</p>
</li>
<li><p>运行直接集成到 Windows 桌面的 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps" >GNU&#x2F;Linux 图形应用程序<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>使用你的设备 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute" >GPU 加速 Linux 上运行的机器学习工作负载<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
</li>
</ul>
<p>摘自 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/about" >什么是适用于 Linux 的 Windows 子系统 | Microsoft Learn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>简而言之，WSL可以让你在Windows上安装Linux子系统而无需其他的软件如 <strong>VMWare</strong></p>
<blockquote>
<p>碎碎念：VMWare的vmware-hosted老是占掉我的443端口导致Steam++加速失败，还得我手动去关qwq</p>
</blockquote>
<h2 id="WSL2-又是什么"><a href="#WSL2-又是什么" class="headerlink" title="WSL2 又是什么"></a>WSL2 又是什么</h2><blockquote>
<p>安装 Linux 发行版时，WSL 2 是默认发行版类型。 WSL 2 使用虚拟化技术在轻量级实用工具虚拟机 (VM) 中运行 Linux 内核。 Linux 发行版作为独立的容器在 WSL 2 托管 VM 内运行。 通过 WSL 2 运行的 Linux 发行版将共享同一网络命名空间、设备树（而非 <code>/dev/pts</code>）、CPU&#x2F;内核&#x2F;内存&#x2F;交换空间、<code>/init</code> 二进制文件，但有自己的 PID 命名空间、装载命名空间、用户命名空间、Cgroup 命名空间和 <code>init</code> 进程。</p>
<p>WSL 2 提高了文件系统性能，并且与 WSL 1 体系结构相比增加了完整的系统调用兼容性。 详细了解 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/compare-versions" >WSL 1 和 WSL 2 的比较<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p>单个 Linux 分发版可以在 WSL 1 或 WSL 2 体系结构中运行。 每个分发版可随时升级或降级，并且你可以并行运行 WSL 1 和 WSL 2 分发版。 请参阅<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/basic-commands#set-default-wsl-version" >设置 WSL 版本命令<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
<p>摘自 <a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/about#what-is-wsl-2" >什么是 WSL 2 | Microsoft Learn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="安装-WSL2-及-Linux发行版"><a href="#安装-WSL2-及-Linux发行版" class="headerlink" title="安装 WSL2 及 Linux发行版"></a>安装 WSL2 及 Linux发行版</h2><h3 id="环境检查"><a href="#环境检查" class="headerlink" title="环境检查"></a>环境检查</h3><p><strong>Win+R</strong> 输入 <code>winver</code> 回车以查看你的 Windows版本。</p>
<blockquote>
<p>若要更新到 WSL 2，需要运行 Windows 10。</p>
<ul>
<li>对于 x64 系统：版本 1903 或更高版本，内部版本为 18362.1049 或更高版本。</li>
<li>对于 ARM64 系统：版本 2004 或更高版本，内部版本为 19041 或更高版本。</li>
</ul>
<p>或 Windows 11。</p>
</blockquote>
<h3 id="启用-WSL-功能"><a href="#启用-WSL-功能" class="headerlink" title="启用 WSL 功能"></a>启用 WSL 功能</h3><p><strong>Win+Q</strong> 打开搜索框，查找 <strong>启用或关闭Windows功能</strong> 。<br>打开后，勾选 <strong>虚拟机平台</strong> 和 <strong>适用于 Linux 的 Windows 子系统</strong></p>
<blockquote>
<p>如图示<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/windows%E5%8A%9F%E8%83%BD.png"
                      alt="windows功能"
                ></p>
</blockquote>
<h3 id="设置默认安装-WSL2"><a href="#设置默认安装-WSL2" class="headerlink" title="设置默认安装 WSL2"></a>设置默认安装 WSL2</h3><p>为了安装 WSL2，需要先安装 WSL2 的内核更新包：<a class="link"   href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" >适用于 x64 计算机的 WSL2 Linux 内核更新包<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。<br>下载后双击安装。<br>安装后，打开 CMD ，使用该指令将 WSL2 设置为默认版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure></div>

<h3 id="升级-WSL2-至最新版本"><a href="#升级-WSL2-至最新版本" class="headerlink" title="升级 WSL2 至最新版本"></a>升级 WSL2 至最新版本</h3><p>打开 CMD ，输入指令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure></div>
<p>完成后可输入以下指令验证是否升级成功：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --version</span><br></pre></td></tr></table></figure></div>

<h3 id="安装至非C盘"><a href="#安装至非C盘" class="headerlink" title="安装至非C盘"></a>安装至非C盘</h3><p>微软的文档的安装方法很简单，一行指令的事：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure></div>
<p><strong>但是，这个安装方法会将Linux发行版默认安装至C盘</strong><br>如果你的C盘很大，那你随意<br>如果你不想将其安装到C盘，那么请继续往下看</p>
<p>首先，去官网下载你想要的Linux发行版：<a class="link"   href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#downloading-distributions" >下载发行版<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E4%B8%8B%E8%BD%BD%E5%8F%91%E8%A1%8C%E7%89%88.png"
                      alt="下载发行版"
                ></p>
</blockquote>
<p>将安装包下载下来后，创建一个 <strong>你想要的发行版的安装目录</strong>，然后将安装包移动至目录中。<br>再将其后缀改为 <code>.zip</code>，解压。解压后你会得到一个文件夹，如果文件夹中有 <code>.exe</code> 文件那双击安装就可以了<br>如果解压后文件夹内有多个 <code>.appx</code> 文件，那就根据自己的平台找到那个 <code>&lt;发行版名称及版本&gt;_x64.appx</code> 文件 或 <code>&lt;发行版名称及版本&gt;_ARM64.appx</code>，将其后缀改为 <code>.zip</code> 再次解压，这样就可以得到 <code>.exe</code> 文件了。<br>这时候，双击 <code>.exe</code> 文件，就能开始安装Linux子系统了。<br>安装时根据向导进行相应的设置即可。不过注意在设置用户名时只能设置小写字母、数字和下划线（不能使用大写字母）。<br>至此我们已经安装好了 WSL2，在 CMD 中使用命令可以检查我们安装的版本：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure></div>


<h2 id="配置-Linux-发行版"><a href="#配置-Linux-发行版" class="headerlink" title="配置 Linux 发行版"></a>配置 Linux 发行版</h2><p>那么咱们现在开始配置Linux发行版（以 <code>Ubuntu 22.04</code> 为例</p>
<p>打开 CMD，输入以下指令进入已安装的发行版：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure></div>
<h3 id="换源并更新软件包"><a href="#换源并更新软件包" class="headerlink" title="换源并更新软件包"></a>换源并更新软件包</h3><p>进入系统的第一步当然是换源</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s@//.*archive.ubuntu.com@//mirrors.ustc.edu.cn@g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>如果你想把安全更新的源也给换了，那就使用如下指令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/security.ubuntu.com/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>
<p>使用 HTTPS 可以有效避免国内运营商的缓存劫持</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;s/http:/https:/g&#x27;</span> /etc/apt/sources.list</span><br></pre></td></tr></table></figure></div>

<p>更新软件包：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade -y</span><br></pre></td></tr></table></figure></div>

<h3 id="启用-systemd"><a href="#启用-systemd" class="headerlink" title="启用 systemd"></a>启用 <code>systemd</code></h3><p>命令行输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[boot]\nsystemd=true&quot;</span> | sudo <span class="built_in">tee</span> /etc/wsl.conf</span><br></pre></td></tr></table></figure></div>
<p>随后退出Linux环境，输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></div>
<p>重启Linux。随后输入<code>wsl</code>进入Linux发行版即可。<br>通过在Linux发行版内执行</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service</span><br></pre></td></tr></table></figure></div>
<p>确认systemd启用情况。</p>
<h3 id="将语言设置为中文"><a href="#将语言设置为中文" class="headerlink" title="将语言设置为中文"></a>将语言设置为中文</h3><p>生成简体中文环境支持文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure></div>

<p>安装语言包</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install language-pack-zh-hans language-pack-zh-hant -y</span><br></pre></td></tr></table></figure></div>
<p>安装字符集</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/locales &amp;&amp; sudo ./install-language-pack zh_CN </span><br></pre></td></tr></table></figure></div>

<p>将语言配置写入 <code>/etc/profile</code> 文件</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&#x27;$a export LANG=zh_CN.UTF-8\nexport LANGUAGE=zh_CN:zh&#x27;</span> /etc/profile</span><br></pre></td></tr></table></figure></div>
<p>使配置生效</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div>
<p>验证是否生效</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">locale</span><br></pre></td></tr></table></figure></div>
<p>如果生效了，终端应该会有如下的输出：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LANGUAGE=zh_CN:zh</span><br><span class="line">LC_CTYPE=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_NUMERIC=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_TIME=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_COLLATE=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MONETARY=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MESSAGES=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_PAPER=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_NAME=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_ADDRESS=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_TELEPHONE=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_MEASUREMENT=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_IDENTIFICATION=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">LC_ALL=</span><br></pre></td></tr></table></figure></div>

<h3 id="固定Linux发行版的ip地址"><a href="#固定Linux发行版的ip地址" class="headerlink" title="固定Linux发行版的ip地址"></a>固定Linux发行版的ip地址</h3><p>在Windows用户目录 <code>%USERPROFILE%</code> 下面创建一个配置文件 .wslconfig，写入以下内容：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[experimental]</span><br><span class="line">networkingMode=mirrored</span><br><span class="line">dnsTunneling=<span class="literal">true</span></span><br><span class="line">firewall=<span class="literal">true</span></span><br><span class="line">autoProxy=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<p>再在终端输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure></div>
<p>重启wsl，再进入就可以了<br>以后想从Windows访问Linux内的服务就可以通过在浏览器中输入 <code>localhost:&lt;端口号&gt;</code> 来访问</p>
<h2 id="潦草地结束"><a href="#潦草地结束" class="headerlink" title="潦草地结束"></a>潦草地结束</h2><p>我受不了这个Win11了，一堆bug，好多应用都是全篇乱码，到网上找了解决方法也没起用<br>不是说已经23H2了吗，不应该整的很好吗（挠头<br>哦听说是阿三做的啊，那没事了<br>微软你不会做可以不要做，不要把这个做成一坨的东西端上来<br><span class="heimu" title="充其量是一坨比较炫的吧">虽然win11UI挺好看的</span><br>直接msdn rufus启动，win10我tm莱纳</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a class="link"   href="https://blog.csdn.net/weixin_45840825/article/details/127138564" >win11 安装 WSL2 在非 C 盘及配置（图形界面+代理）_wsl不安装在c盘 csdn-CSDN博客<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/593263088" >WSL2 网络的最终解决方案 - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/165961076" >Ubuntu Zh_CN_UTF8 设置 - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Win11</tag>
        <tag>WSL2</tag>
      </tags>
  </entry>
  <entry>
    <title>青春不散场</title>
    <url>/posts/8073.html</url>
    <content><![CDATA[<blockquote>
<p>我的语言表达能力在去年一整年治病养病中已基本退化，说的话可能没有什么逻辑，请见谅。</p>
</blockquote>
<span id="more"></span>

<hr>
<p>2019.9.1 – 2023.6.20</p>
<p>我的初中生涯结束了。</p>
<p>时间过得真快啊。</p>
<hr>
<p>很高兴，我在这几年间认识了很多朋友，他们在我记忆中留下了不可磨灭的印记。</p>
<p>谢谢你们。</p>
<p>谢谢C402和C420的所有人。</p>
<hr>
<p>我们相逢于二中，却又离别于二中。</p>
<p>我们的人生轨迹在此刻开始基本成型。</p>
<p>但是那又怎么样？</p>
<p><strong>“海内存知己，天涯若比邻。无为在歧路，儿女共沾巾。”</strong></p>
<p>只要我们仍是朋友，无论天涯海角，我们都会在一起。</p>
<p>路还长着呢，一切皆有可能。</p>
<hr>
<p><strong>青春不散场，我们永远在一起。</strong></p>
<p><strong>祝2023届中考生都能考上心仪的高中！</strong></p>
<p>By QiuSYan</p>
<p>2023&#x2F;07&#x2F;01</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title>Windows下简易Hexo部署教程</title>
    <url>/posts/62801.html</url>
    <content><![CDATA[
  <div class="note p-4 mb-4 rounded-small info">
    <p>这玩意感觉有点简陋了，等我过两天把这玩意翻新一下</p>

  </div>

<p>最近没啥事干，就来记录一下Hexo部署过程吧<br><span class="heimu" title="咳咳">其实是我经常<del class="mask">整活</del>给电脑重装系统导致环境啥的得重新配（捂脸</span><br>虽然是Windows下的教程，但是Linux和Mac端也大差不差</p>
<p><meting-js server="netease" type="song" id="1833191196"></meting-js></p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul>
<li>必须<ul>
<li>一个会使用搜索引擎去解决问题的脑子</li>
<li>一个Github账号</li>
<li>一台电脑</li>
</ul>
</li>
<li>可选<ul>
<li>一个域名</li>
</ul>
</li>
</ul>
<h2 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么"></a>Hexo是什么</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>Hexo中文文档：<a class="link"   href="https://hexo.io/zh-cn/docs/" >文档 | Hexo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>进入<a class="link"   href="https://git-scm.com/download" >Git官网下载界面<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，选择对应的系统，点击下载安装即可。<br>安装选择默认配置就行 <span class="heimu">就是一路按Next</span></p>
<blockquote>
<p>如果你的网络环境难以访问下载界面，那么也可以选择 <strong><a class="link"   href="https://mirrors.bfsu.edu.cn/github-release/git-for-windows/git/LatestRelease/Git-2.44.0-64-bit.exe" >点击此处<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong> 用镜像站下载</p>
</blockquote>
<h2 id="绑定Github"><a href="#绑定Github" class="headerlink" title="绑定Github"></a>绑定Github</h2><p>在桌面右键，选择 <code>Open Git Bash here</code>，唤出Git Bash。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/gitbash.png"
                      alt="如图示"
                ></p>
<p>在Git Bash中输入 <code>ssh</code> 以验证SSH安装。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/gitbash-ssh.png"
                      alt="如果安装了ssh应该会出现如图所示输出"
                ></p>
<p>随后输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></div>
<p>指定 RSA 算法生成密钥。然后按4次回车，就生成了两个文件，分别为秘钥 <code>id_rsa</code> 和公钥 <code>id_rsa.pub</code>。<br>文件的位置会在Git Bash上显示，默认会生成在以下目录：</p>
<ul>
<li>Linux：~&#x2F;.ssh</li>
<li>Mac: ~&#x2F;.ssh</li>
<li>Windows: C:&#x2F;Users&#x2F;yourusername&#x2F;.ssh</li>
</ul>
<p>进入密钥生成目录并显示公钥内容：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh &amp;&amp; <span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/gitbash-rsa.png"
                      alt="如图示"
                ><br>将这一串<code>ssh-rsa</code>开头的玩意复制，然后打开你的Github - <strong>Settings</strong> - <strong>SSH and GPG keys</strong><br>或者直接通过此链接跳转：<a class="link"   href="https://github.com/settings/keys" >SSH and GPG keys<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>点击 <code>New SSH key</code>，然后将你刚刚复制的那一串东西粘贴到<strong>Key</strong>内，再点击<strong>Add SSH key</strong>即可</p>
<blockquote>
<p>标题随意，不填也行</p>
</blockquote>
<p>在Git Bash中输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>
<p>以验证是否添加成功。<br>第一次连接会遇到这种情况，填yes就行<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/gitbash-github.png"
                      alt="填yes就行"
                ><br>出现如下输出则证明绑定Github成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/gitbash-github1.png"
                      alt="如图示"
                ></p>
<h2 id="Node-js相关"><a href="#Node-js相关" class="headerlink" title="Node.js相关"></a>Node.js相关</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>截至本文撰写时间（2024&#x2F;3&#x2F;7），Node.js官方推荐版本为 <code>20.11.1 LTS</code><br>Windows用户可点击 <a class="link"   href="https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/v20.11.1/node-v20.11.1-x64.msi" >此镜像链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 一键下载</p>
<p>下载完成后，在 <strong>D盘</strong> 新建一个文件夹 <code>ndoejs</code>，然后打开安装程序，将其安装目录修改为 <code>D:\nodejs</code>，再一路点击 <code>Next</code> 即可。</p>
<p>验证安装是否成功：CMD输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></div>
<p>如果成功安装，你应该会看到如下的输出：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\qiusyan&gt;node -v</span><br><span class="line">v20.11.1</span><br><span class="line">C:\Users\qiusyan&gt;npm -v</span><br><span class="line">10.2.4</span><br></pre></td></tr></table></figure></div>


<h3 id="设置npm在安装全局模块时的路径和环境变量"><a href="#设置npm在安装全局模块时的路径和环境变量" class="headerlink" title="设置npm在安装全局模块时的路径和环境变量"></a>设置npm在安装全局模块时的路径和环境变量</h3><p>如果不设置的话，安装模块的时候就会把模块装到C盘，占用C盘的空间<br>你也不想变成C盘战士吧 .jpg</p>
<p>在 nodejs 安装文件夹中新建两个空文件夹 <code>node_cache</code>和<code>node_global</code></p>
<blockquote>
<p>两个文件夹目录应该分别是 <code>D:\nodejs\node_cache</code> 和 <code>D:\nodejs\node_global</code></p>
</blockquote>
<p>然后打开CMD，输入如下两个命令：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\nodejs\node_global&quot;</span></span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>再来设置环境变量。<br>打开 <strong>控制面板</strong> - <strong>系统</strong> - <strong>高级系统设置</strong> - <strong>环境变量</strong> ，然后在<strong>系统变量</strong>中新建一个变量名为 <code>NODE_PATH</code>，值为<code>D:\nodejs\node_global\node_modules</code>，如下图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/nodepath.png"
                      alt="设置环境变量"
                ><br>然后编辑<strong>用户变量</strong>里的 <code>Path</code> ，将相应npm的路径改为 <code>D:\nodejs\node_global</code>，如下图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/npmpath.png"
                     
                ></p>
<h3 id="npm换源"><a href="#npm换源" class="headerlink" title="npm换源"></a>npm换源</h3><p>CMD输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure></div>
<p>将npm源更换为阿里的</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p><strong>使用管理员权限</strong> 运行你的CMD或者Powershell，然后输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure></div>
<p>全局安装 <code>hexo-cli</code></p>
<p>再挑个你 <strong>想要存放博客源代码的地方</strong> ，比如 <code>E:\个人文件\Blog</code>，那就去 <code>E盘</code> 的 <code>个人文件</code> 目录下，新建一个名为<code>Blog</code>的文件夹。<br>在该文件夹内 <strong>使用管理员权限</strong> 运行你的CMD或者Powershell，输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></div>
<p>初始化博客。</p>
<blockquote>
<p>如果打开管理员权限的CMD窗口后发现路径不正确，那么在CMD中输入 <code>cd &#39;你的博客绝对路径&#39;</code> 即可<br>例如</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&#x27;E:\个人文件\Blog&#x27;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>如果你的网络环境无法让你连接到Github，那么建议使用 <a class="link"   href="https://steampp.net/" >Watt Toolkit<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 加速Github连接。<br>使用工具加速后，请打开Git Bash，输入</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>
<p>禁用Git的SSL证书验证<br>如果你不想禁用，那么请自行科学上网</p>
</blockquote>
<blockquote>
<p>以下是hexo-cli中的一些命令</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除hexo缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo d <span class="comment"># 部署静态文件到预设定的服务</span></span><br><span class="line">hexo s <span class="comment"># 本地预览</span></span><br></pre></td></tr></table></figure></div>
<p><strong>但是这些我们都用不到，因为我们要用的是hexo集成部署</strong> 而不是生成静态文件后手动推送到云端</p>
</blockquote>
<h2 id="Hexo集成部署"><a href="#Hexo集成部署" class="headerlink" title="Hexo集成部署"></a>Hexo集成部署</h2><h3 id="什么是Hexo集成部署"><a href="#什么是Hexo集成部署" class="headerlink" title="什么是Hexo集成部署"></a>什么是Hexo集成部署</h3><p>Hexo集成部署即每次我们 push 源代码后，自动生成静态文件，并上传到我们的仓库或者云存储中。</p>
<p><span class="heimu">为什么一定要集成部署？你不集成部署那能叫Hexo吗？</span></p>
<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>打开Github，新建两个仓库<br><strong>一个仓库是存放源代码的</strong>，<strong>一个是存放源代码生成的静态文件的</strong>。</p>

  <div class="note p-4 mb-4 rounded-small info">
    <p><strong>源代码仓库记得设置为私有</strong></p>

  </div>

<h3 id="Github-的链接形式"><a href="#Github-的链接形式" class="headerlink" title="Github 的链接形式"></a>Github 的链接形式</h3><p>  Github 这种网站的代码仓库地址常见有三种形式，适用于不同的情况，下面简单介绍一下。</p>
<ul>
<li>普通链接，一般在使用账号密码登录后或者ssh传输时使用。</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这种地址可以直接在仓库中复制</span><br><span class="line">https://github.com/QSlotus/Blog.git</span><br><span class="line">git@github.com:QSlotus/Blog.git</span><br></pre></td></tr></table></figure></div>

<ul>
<li>账号密码链接，这种适用于自己调用 Github 的数据或者当 Api 使用等情形。</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://&#123;username&#125;:&#123;password&#125;@github.com/QSlotus/Blog.git</span><br></pre></td></tr></table></figure></div>

<ul>
<li>token 链接，在 Github Settings 中生成 token 后，可以直接放到仓库地址中，这样就可以直接访问有权限的仓库，方便我们自动部署。</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://&#123;token&#125;@github.com/QSlotus/Blog.git</span><br></pre></td></tr></table></figure></div>

<h3 id="生成-Github-Token"><a href="#生成-Github-Token" class="headerlink" title="生成 Github Token"></a>生成 Github Token</h3><p>了解完 Github 这些链接形式后，我们就可以开始配置了，因为我们决定使用 Token 这种链接形式来进行连线推送等操作，所以首先就是生成<em><strong>Github Token</strong></em>。<br>打开 <a class="link"   href="https://github.com/settings/tokens/new" >Personal access tokens<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 创建一个新的token<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/ghtoken.png"
                      alt="如图示"
                ><br>如上图示，Token名称随意，<code>Expiration</code> 选择 <code>No expiration</code>，然后勾选 <code>repo</code> 下的所有权限，再点击最下方的 <code>Generate token</code> 即可。</p>
<p><strong>token生成后，此信息只会显示一次，记得及时保存</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/ghtoken1.png"
                     
                ></p>
<h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 _config.yml</h3><p>打开你的博客源代码根目录，找到 <code>_config.yml</code> 文件，拉到最下面，修改 <code>deploy</code> 部分为如下代码：</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://&#123;$GH_TOKEN&#125;@github.com/QSlotus/Blog.git</span>  <span class="comment">#你的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></div>


  <div class="note p-4 mb-4 rounded-small info">
    <p>注意此处的 <code>{$GH_TOKEN}</code> 之前生成的 token 内容，仓库地址是我们 <strong>存放源代码生成的静态文件的那个</strong></p>

  </div>

<h3 id="添加-GitHub-Actions-脚本"><a href="#添加-GitHub-Actions-脚本" class="headerlink" title="添加 GitHub Actions 脚本"></a>添加 GitHub Actions 脚本</h3><p>Hexo配置完成，开始编写 Github Actions 脚本文件。<br>GitHub Actions 的配置文件叫做 workflow 文件，存放在源代码仓库的 .github&#x2F;workflows 目录。<br>workflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为 .yml，比如 test.yml。一个库可以有多个 workflow 文件。<br>GitHub 在我们完成预设触发条件时，只要发现 .github&#x2F;workflows 目录里面有 .yml 文件，就会自动读取运行该文件。</p>
<p>在博客源代码根目录创建文件，路径为 <code>.github/workflows/deploy.yml</code>。<br>修改文件内容为如下：</p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">QiuSYan&#x27;s</span> <span class="string">Blog</span> <span class="string">CI/CD</span> <span class="comment"># 脚本 workflow 名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>] <span class="comment"># 当前监测 main 分支的 push</span></span><br><span class="line">    <span class="attr">paths:</span> <span class="comment"># 监测所有 source 目录下的文件变动，所有 yml,json 后缀文件的变动。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;*.json&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**.yml&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/source/**&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">blog:</span> <span class="comment"># 任务名称</span></span><br><span class="line">    <span class="attr">timeout-minutes:</span> <span class="number">30</span> <span class="comment"># 设置 30 分钟超时</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 指定最新 ubuntu 系统</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span> <span class="comment"># 拉取仓库代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;20&#x27;</span> <span class="comment"># 你想要设置的Node.js版本</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node_modules</span> <span class="comment"># 缓存 node_modules，提高编译速度</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span> </span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">cache-name:</span> <span class="string">cache-node-modules</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.npm</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-build-$&#123;&#123;</span> <span class="string">env.cache-name</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-build-</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Node.js</span> <span class="comment"># 安装源代码所需插件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          echo &quot;init node successful&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo-cli</span> <span class="comment"># 安装 Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli --save</span></span><br><span class="line"><span class="string">          echo &quot;install hexo successful&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Blog</span> <span class="comment"># 编译创建静态博客文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo g</span></span><br><span class="line"><span class="string">          echo &quot;build blog successful&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">QiuSYan&#x27;s</span> <span class="string">Blog</span> <span class="comment"># 设置 git 信息并推送静态博客文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># 记得修改git提交信息为自己的</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;QiuSYan&quot;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;halo-402@outlook.com&quot;</span> </span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;Deploy Successful!&quot;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="将源代码推送至Github"><a href="#将源代码推送至Github" class="headerlink" title="将源代码推送至Github"></a>将源代码推送至Github</h3><p>到了这里，我们集成部署就快完成了。现在就是将整个博客源代码推送至Github。</p>
<p>在博客根目录下打开Git Bash，依次输入以下指令：（注释不要复制</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="comment"># 初始化一个Git仓库</span></span><br><span class="line">git add . <span class="comment"># 将该目录下所有文件添加至缓冲区</span></span><br><span class="line">git commit -m <span class="string">&quot;提交信息&quot;</span> <span class="comment"># 进行一次提交</span></span><br><span class="line">git remote add origin git@github.com:QSlotus/blog-source.git <span class="comment"># 这里的仓库是你创建的博客源代码存放仓库，跟之前config.yml里面的不同</span></span><br><span class="line">git push origin main <span class="comment"># 指定提交分支为 main</span></span><br><span class="line">git push origin main <span class="comment"># push代码</span></span><br></pre></td></tr></table></figure></div>
<p>即可。</p>
<h2 id="部署你的博客"><a href="#部署你的博客" class="headerlink" title="部署你的博客"></a>部署你的博客</h2><p>之前我们将博客的源代码推送到了Github，让Github Actions帮我们生成静态文件并推送到静态文件仓库<br>那么现在我们来将博客部署好（指能在浏览器访问到你的博客</p>
<p>我们使用 <strong>Netlify</strong> 来部署。</p>
<p>那么，什么是Netlify呢？</p>
<p>这是ChatGLM给出的答复：</p>
<blockquote>
<p>Netlify 是一个提供网站托管和服务器less后端服务的平台，特别适合现代静态网站的部署和托管。它支持从GitHub、GitLab和Bitbucket等代码托管服务中自动获取网站源码，并提供了一系列强大的功能来帮助开发者快速、高效地构建、部署和维护网站。<br>Netlify 提供的主要功能包括：</p>
<ol>
<li><p><strong>持续部署</strong>：Netlify 可以在每次代码推送至你的Git仓库时自动构建和部署网站。</p>
</li>
<li><p><strong>服务器less函数和后端</strong>：Netlify Functions 允许你运行服务器less函数，支持多种编程语言，无需管理服务器即可处理表单提交、API请求等。</p>
</li>
<li><p><strong>自定义域名</strong>：你可以使用自己的域名，并且Netlify提供了免费的SSL证书来实现HTTPS。</p>
</li>
<li><p><strong>静态文件托管</strong>：Netlify 可以托管静态文件，包括HTML、CSS、JavaScript等。</p>
</li>
<li><p><strong>支持多种构建命令和工具</strong>：Netlify 支持多种静态站点生成器，如Jekyll、Hugo、Gatsby等，以及自定义的构建命令。</p>
</li>
<li><p><strong>形式和数据存储</strong>：Netlify 可以收集表单数据并存储在后台，也可以通过集成其他服务如Airtable、Google Sheets等处理数据。</p>
</li>
<li><p><strong>全球加速的CDN</strong>：Netlify 提供了全球内容分发网络（CDN），确保用户可以从最近的服务器快速加载内容。</p>
</li>
<li><p><strong>环境变量管理</strong>：可以安全地存储和管理环境变量，便于在不同环境中使用不同的配置。</p>
</li>
</ol>
<p>Netlify 对于个人开发者和小型团队来说，提供了一个简洁、易用的界面，以及强大的自动化工具，使得网站部署和维护变得更加简单。同时，它的服务器less功能也为开发者提供了构建复杂应用的灵活性。</p>
</blockquote>
<p>打开 <a class="link"   href="https://app.netlify.com/login" >Netlify登录界面<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，选择用Github登录。<br>随后可能有一些邮箱验证啥的，按照他的提示去做就行了。<br>然后创建一个Team。<br>点击 <code>Create new team</code> ，计划选那个 <code>Starter team plan</code> ，这个是免费的。然后填写相关信息，点击创建即可。<br>随后应该会跳转到你的Team主页，这时点左侧的 <code>Site</code> - <code>Add new site</code> - <code>Import an existing project</code>后，会看到如下的界面。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/netlify-deploy.png"
                     
                ><br>选择 <code>Deploy with Github</code>，然后在弹出的窗口中按照其指引安装Netlify App，记得将其安装到所有的仓库中<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/netlify-deploy1.png"
                     
                ><br>这时你会在页面上看到你的所有仓库，然后你找到那个 <strong>博客静态文件</strong> 存放的仓库，选择。<br>选择之后会跳转到信息填写页面，其中 <code>Site name</code> 部分建议修改为你想要的二级域名前缀，其他的不用改，然后点 <code>Deploy</code> 就行了。</p>
<blockquote>
<p>Netlify会提供一个格式为 <code>yoursitename.netlify.app</code> 的二级域名</p>
</blockquote>
<p>这时你去浏览器访问 <code>你刚刚改的站点名称.netlify.app</code> 会发现，博客已经部署完成。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/102592286" >从零开始搭建个人博客（超详细） - 知乎 (zhihu.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://cloud.tencent.com/developer/article/2369534" >【Hexo自动部署】优雅的使用 Github Actions 进行 Hexo 静态博客的持续集成与部署-腾讯云开发者社区-腾讯云 (tencent.com)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Netlify</tag>
        <tag>Github Actions</tag>
      </tags>
  </entry>
</search>
